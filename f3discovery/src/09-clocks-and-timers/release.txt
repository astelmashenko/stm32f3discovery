warning: unused variable: `tim6`
 --> src/09-clocks-and-timers/src/main.rs:7:10
  |
7 | fn delay(tim6: &tim6::RegisterBlock, ms: u16) {
  |          ^^^^ help: if this is intentional, prefix it with an underscore: `_tim6`
  |
  = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `rcc`
  --> src/09-clocks-and-timers/src/main.rs:13:16
   |
13 |     let (leds, rcc, tim6) = aux9::init();
   |                ^^^ help: if this is intentional, prefix it with an underscore: `_rcc`

warning: 2 warnings emitted


clocks-and-timers:	file format elf32-littlearm

Disassembly of section .text:

08000194 <Reset>:
; pub unsafe extern "C" fn Reset() -> ! {
 8000194:      	push	{r7, lr}
 8000196:      	mov	r7, sp
;     __pre_init();
 8000198:      	bl	0x8001152 <__pre_init>  @ imm = #0xfb6
;     while sbss < ebss {
 800019c:      	movw	r0, #0x4
 80001a0:      	movw	r1, #0x0
 80001a4:      	movt	r0, #0x2000
 80001a8:      	movt	r1, #0x2000
 80001ac:      	cmp	r1, r0
 80001ae:      	bhs	0x80001d2 <Reset+0x3e>  @ imm = #0x20
 80001b0:      	movs	r2, #0x0
 80001b2:      	str	r2, [r1], #4
;     while sbss < ebss {
 80001b6:      	cmp	r1, r0
 80001b8:      	bhs	0x80001d2 <Reset+0x3e>  @ imm = #0x16
 80001ba:      	str	r2, [r1], #4
;     while sbss < ebss {
 80001be:      	cmp	r1, r0
 80001c0:      	itt	lo
 80001c2:      	strlo	r2, [r1], #4
;     while sbss < ebss {
 80001c6:      	cmplo	r1, r0
 80001c8:      	bhs	0x80001d2 <Reset+0x3e>  @ imm = #0x6
 80001ca:      	str	r2, [r1], #4
;     while sbss < ebss {
 80001ce:      	cmp	r1, r0
 80001d0:      	blo	0x80001b2 <Reset+0x1e>  @ imm = #-0x22
;     while sdata < edata {
 80001d2:      	movw	r1, #0x0
 80001d6:      	movw	r0, #0x0
 80001da:      	movt	r1, #0x2000
 80001de:      	movt	r0, #0x2000
 80001e2:      	cmp	r0, r1
 80001e4:      	bhs	0x8000204 <Reset+0x70>  @ imm = #0x1c
 80001e6:      	adds	r2, r0, #0x4
 80001e8:      	cmp	r1, r2
 80001ea:      	it	hi
 80001ec:      	movhi	r2, r1
 80001ee:      	mvns	r1, r0
 80001f0:      	add	r1, r2
 80001f2:      	bic	r1, r1, #0x3
 80001f6:      	adds	r2, r1, #0x4
 80001f8:      	movw	r1, #0x1704
 80001fc:      	movt	r1, #0x800
 8000200:      	bl	0x800135e <__aeabi_memcpy4> @ imm = #0x115a
 8000204:      	movw	r0, #0xed88
 8000208:      	movt	r0, #0xe000
;                 *SCB_CPACR | SCB_CPACR_FPU_ENABLE | SCB_CPACR_FPU_USER,
 800020c:      	ldr	r1, [r0]
 800020e:      	orr	r1, r1, #0xf00000
 8000212:      	str	r1, [r0]
;             trampoline()
 8000214:      	bl	0x8001148 <ResetTrampoline> @ imm = #0xf30

08000218 <main>:
; #[entry]
 8000218:      	push	{r7, lr}
 800021a:      	mov	r7, sp
 800021c:      	bl	0x8000220 <clocks_and_timers::__cortex_m_rt_main::h88aac237bc0088c1> @ imm = #0x0

08000220 <clocks_and_timers::__cortex_m_rt_main::h88aac237bc0088c1>:
; fn main() -> ! {
 8000220:      	push	{r7, lr}
 8000222:      	mov	r7, sp
;     let r: u32 = call_asm!(__primask_r() -> u32);
 8000224:      	bl	0x8001358 <__primask_r> @ imm = #0x1130
 8000228:      	mov	r4, r0
;     call_asm!(__cpsid());
 800022a:      	bl	0x8001350 <__cpsid>     @ imm = #0x1122
;             if unsafe { DEVICE_PERIPHERALS } {
 800022e:      	movw	r0, #0x0
 8000232:      	movt	r0, #0x2000
 8000236:      	ldrb	r5, [r0]
 8000238:      	cmp	r5, #0x0
 800023a:      	itt	eq
 800023c:      	moveq	r1, #0x1
;         DEVICE_PERIPHERALS = true;
 800023e:      	strbeq	r1, [r0]
;     if primask.is_active() {
 8000240:      	lsls	r0, r4, #0x1f
;     call_asm!(__cpsie());
 8000242:      	it	eq
 8000244:      	bleq	0x8001354 <__cpsie>     @ imm = #0x110c
 8000248:      	cmp	r5, #0x0
 800024a:      	bne.w	0x80003d4 <clocks_and_timers::__cortex_m_rt_main::h88aac237bc0088c1+0x1b4> @ imm = #0x186
 800024e:      	movw	r0, #0x1028
 8000252:      	mov.w	r11, #0x10000000
 8000256:      	movt	r0, #0x4002
 800025a:      	mov.w	r6, #0x20000000
 800025e:      	ldr	r1, [r0, #-20]
 8000262:      	mov.w	r3, #0x400
 8000266:      	mov.w	r4, #0x800
 800026a:      	mov.w	r12, #0x4000
;         self.w.bits = (self.w.bits & !(0x01 << 21)) | (((value as u32) & 0x01) << 21);
 800026e:      	orr	r1, r1, #0x200000
 8000272:      	str	r1, [r0, #-20]
 8000276:      	ldr	r1, [r0]
 8000278:      	mov.w	lr, #0x8000
 800027c:      	mov.w	r8, #0x100
 8000280:      	mov.w	r9, #0x200
;         self.w.bits = (self.w.bits & !(0x01 << 21)) | (((value as u32) & 0x01) << 21);
 8000284:      	orr	r1, r1, #0x200000
 8000288:      	str	r1, [r0]
 800028a:      	ldr	r1, [r0]
 800028c:      	mov.w	r10, #0x2000000
;         self.w.bits = (self.w.bits & !(0x01 << 21)) | (((value as u32) & 0x01) << 21);
 8000290:      	bic	r1, r1, #0x200000
 8000294:      	str	r1, [r0]
 8000296:      	movw	r0, #0x1018
 800029a:      	movs	r1, #0x1
 800029c:      	movt	r0, #0x4800
 80002a0:      	ldr	r2, [r0, #-24]
;         self.w.bits = (self.w.bits & !(0x03 << 18)) | (((value as u32) & 0x03) << 18);
 80002a4:      	bfi	r2, r1, #18, #2
 80002a8:      	str	r2, [r0, #-24]
 80002ac:      	ldr	r2, [r0, #-20]
;         self.w.bits = (self.w.bits & !(0x01 << 9)) | (((value as u32) & 0x01) << 9);
 80002b0:      	bic	r2, r2, #0x200
 80002b4:      	str	r2, [r0, #-20]
 80002b8:      	ldr	r2, [r0, #-24]
;         self.w.bits = (self.w.bits & !(0x03 << 16)) | (((value as u32) & 0x03) << 16);
 80002bc:      	bfi	r2, r1, #16, #2
 80002c0:      	str	r2, [r0, #-24]
 80002c4:      	ldr	r2, [r0, #-20]
;         self.w.bits = (self.w.bits & !(0x01 << 8)) | (((value as u32) & 0x01) << 8);
 80002c8:      	bic	r2, r2, #0x100
 80002cc:      	str	r2, [r0, #-20]
 80002d0:      	ldr	r2, [r0, #-24]
;         self.w.bits = (self.w.bits & !(0x03 << 20)) | (((value as u32) & 0x03) << 20);
 80002d4:      	bfi	r2, r1, #20, #2
 80002d8:      	str	r2, [r0, #-24]
 80002dc:      	ldr	r2, [r0, #-20]
;         self.w.bits = (self.w.bits & !(0x01 << 10)) | (((value as u32) & 0x01) << 10);
 80002e0:      	bic	r2, r2, #0x400
 80002e4:      	str	r2, [r0, #-20]
 80002e8:      	ldr	r2, [r0, #-24]
;         self.w.bits = (self.w.bits & !(0x03 << 30)) | (((value as u32) & 0x03) << 30);
 80002ec:      	bfi	r2, r1, #30, #2
 80002f0:      	str	r2, [r0, #-24]
 80002f4:      	ldr	r2, [r0, #-20]
;         self.w.bits = (self.w.bits & !(0x01 << 15)) | (((value as u32) & 0x01) << 15);
 80002f8:      	bic	r2, r2, #0x8000
 80002fc:      	str	r2, [r0, #-20]
 8000300:      	ldr	r2, [r0, #-24]
;         self.w.bits = (self.w.bits & !(0x03 << 22)) | (((value as u32) & 0x03) << 22);
 8000304:      	bfi	r2, r1, #22, #2
 8000308:      	str	r2, [r0, #-24]
 800030c:      	ldr	r2, [r0, #-20]
;         self.w.bits = (self.w.bits & !(0x01 << 11)) | (((value as u32) & 0x01) << 11);
 8000310:      	bic	r2, r2, #0x800
 8000314:      	str	r2, [r0, #-20]
 8000318:      	ldr	r2, [r0, #-24]
;         self.w.bits = (self.w.bits & !(0x03 << 28)) | (((value as u32) & 0x03) << 28);
 800031c:      	bfi	r2, r1, #28, #2
 8000320:      	str	r2, [r0, #-24]
 8000324:      	ldr	r2, [r0, #-20]
;         self.w.bits = (self.w.bits & !(0x01 << 14)) | (((value as u32) & 0x01) << 14);
 8000328:      	bic	r2, r2, #0x4000
 800032c:      	str	r2, [r0, #-20]
 8000330:      	ldr	r2, [r0, #-24]
;         self.w.bits = (self.w.bits & !(0x03 << 24)) | (((value as u32) & 0x03) << 24);
 8000334:      	bfi	r2, r1, #24, #2
 8000338:      	str	r2, [r0, #-24]
 800033c:      	ldr	r2, [r0, #-20]
;         self.w.bits = (self.w.bits & !(0x01 << 12)) | (((value as u32) & 0x01) << 12);
 8000340:      	bic	r2, r2, #0x1000
 8000344:      	str	r2, [r0, #-20]
 8000348:      	ldr	r2, [r0, #-24]
;         self.w.bits = (self.w.bits & !(0x03 << 26)) | (((value as u32) & 0x03) << 26);
 800034c:      	bfi	r2, r1, #26, #2
 8000350:      	str	r2, [r0, #-24]
 8000354:      	ldr	r1, [r0, #-20]
 8000358:      	mov.w	r2, #0x2000
;         self.w.bits = (self.w.bits & !(0x01 << 13)) | (((value as u32) & 0x01) << 13);
 800035c:      	bic	r1, r1, #0x2000
 8000360:      	str	r1, [r0, #-20]
 8000364:      	mov.w	r1, #0x2000000
 8000368:      	str	r1, [r0]
 800036a:      	mov.w	r1, #0x1000000
 800036e:      	str	r1, [r0]
 8000370:      	mov.w	r1, #0x4000000
 8000374:      	str	r1, [r0]
 8000376:      	mov.w	r1, #0x80000000
 800037a:      	str	r1, [r0]
 800037c:      	mov.w	r1, #0x8000000
 8000380:      	str	r1, [r0]
 8000382:      	mov.w	r1, #0x40000000
 8000386:      	str	r1, [r0]
 8000388:      	mov.w	r1, #0x1000
 800038c:      	str.w	r11, [r0]
 8000390:      	str	r6, [r0]
 8000392:      	mov.w	r5, #0x4000000
 8000396:      	str	r3, [r0]
 8000398:      	str.w	r10, [r0]
 800039c:      	str	r4, [r0]
 800039e:      	str	r5, [r0]
 80003a0:      	mov.w	r5, #0x8000000
 80003a4:      	str	r1, [r0]
 80003a6:      	str	r5, [r0]
 80003a8:      	mov.w	r5, #0x40000000
 80003ac:      	str	r2, [r0]
 80003ae:      	str.w	r11, [r0]
 80003b2:      	str.w	r12, [r0]
 80003b6:      	str	r6, [r0]
 80003b8:      	str.w	lr, [r0]
 80003bc:      	str	r5, [r0]
 80003be:      	mov.w	r5, #0x80000000
 80003c2:      	str.w	r8, [r0]
 80003c6:      	str	r5, [r0]
 80003c8:      	mov.w	r5, #0x1000000
 80003cc:      	str.w	r9, [r0]
 80003d0:      	str	r5, [r0]
 80003d2:      	b	0x8000392 <clocks_and_timers::__cortex_m_rt_main::h88aac237bc0088c1+0x172> @ imm = #-0x44
 80003d4:      	bl	0x80006f4 <core::panicking::panic::h952fce1e2a743e07> @ imm = #0x31c

080003d8 <core::ops::function::FnOnce::call_once::ha8be7acee6402557>:
 80003d8:      	ldr	r0, [r0]
 80003da:      	b	0x80003da <core::ops::function::FnOnce::call_once::ha8be7acee6402557+0x2> @ imm = #-0x4

080003dc <core::panicking::panic_fmt::h7b521c9693495a00>:
 80003dc:      	push	{r7, lr}
 80003de:      	mov	r7, sp
 80003e0:      	sub	sp, #0x18
 80003e2:      	movs	r1, #0x1
 80003e4:      	strh.w	r1, [sp, #0x14]
 80003e8:      	movw	r1, #0x15c4
 80003ec:      	movt	r1, #0x800
 80003f0:      	strd	r0, r1, [sp, #12]
 80003f4:      	movw	r0, #0x1600
 80003f8:      	movt	r0, #0x800
 80003fc:      	str	r0, [sp, #0x8]
 80003fe:      	movw	r0, #0x16d8
 8000402:      	movt	r0, #0x800
 8000406:      	str	r0, [sp, #0x4]
 8000408:      	add	r0, sp, #0x4
 800040a:      	bl	0x8001154 <rust_begin_unwind> @ imm = #0xd46

0800040e <core::ptr::drop_in_place<core::fmt::Error>::hbb5da7fe806d9d58>:
 800040e:      	bx	lr

08000410 <<T as core::any::Any>::type_id::h6a47ff7ae1ee9817>:
 8000410:      	movw	r0, #0xf5c3
 8000414:      	movw	r1, #0xeda3
 8000418:      	movw	r2, #0xe25f
 800041c:      	movw	r3, #0x3389
 8000420:      	movt	r0, #0xaf60
 8000424:      	movt	r1, #0xbc67
 8000428:      	movt	r2, #0x18
 800042c:      	movt	r3, #0x858f
 8000430:      	bx	lr
 8000432:      	bmi	0x80003de <core::panicking::panic_fmt::h7b521c9693495a00+0x2> @ imm = #-0x58

08000434 <core::fmt::num::imp::<impl core::fmt::Display for u32>::fmt::hf257a905c117f913>:
 8000434:      	push	{r4, r5, r6, r7, lr}
 8000436:      	add	r7, sp, #0xc
 8000438:      	push.w	{r8, r9, r10, r11}
 800043c:      	sub	sp, #0x3c
 800043e:      	ldr	r2, [r0]
 8000440:      	movw	r0, #0x2710
 8000444:      	mov	r6, r1
 8000446:      	cmp	r2, r0
 8000448:      	blo	0x80004dc <core::fmt::num::imp::<impl core::fmt::Display for u32>::fmt::hf257a905c117f913+0xa8> @ imm = #0x90
 800044a:      	movw	lr, #0x1759
 800044e:      	movw	r4, #0x1610
 8000452:      	movw	r3, #0xe0ff
 8000456:      	sub.w	r10, r7, #0x43
 800045a:      	movs	r1, #0x0
 800045c:      	movw	r12, #0xff9c
 8000460:      	movt	lr, #0xd1b7
 8000464:      	movw	r8, #0xd8f0
 8000468:      	movw	r9, #0x147b
 800046c:      	movt	r4, #0x800
 8000470:      	movt	r3, #0x5f5
 8000474:      	str	r6, [sp, #0x10]
 8000476:      	umull	r0, r5, r2, lr
 800047a:      	add.w	r11, r10, r1
 800047e:      	subs	r1, #0x4
 8000480:      	cmp	r2, r3
 8000482:      	lsr.w	r0, r5, #0xd
 8000486:      	mla	r5, r0, r8, r2
 800048a:      	mov	r2, r0
 800048c:      	uxth	r6, r5
 800048e:      	lsr.w	r6, r6, #0x2
 8000492:      	mul	r6, r6, r9
 8000496:      	lsr.w	r6, r6, #0x11
 800049a:      	mla	r5, r6, r12, r5
 800049e:      	ldrh.w	r6, [r4, r6, lsl #1]
 80004a2:      	strh.w	r6, [r11, #0x23]
 80004a6:      	uxth	r5, r5
 80004a8:      	ldrh.w	r5, [r4, r5, lsl #1]
 80004ac:      	strh.w	r5, [r11, #0x25]
 80004b0:      	bhi	0x8000476 <core::fmt::num::imp::<impl core::fmt::Display for u32>::fmt::hf257a905c117f913+0x42> @ imm = #-0x3e
 80004b2:      	ldr	r6, [sp, #0x10]
 80004b4:      	adds	r1, #0x27
 80004b6:      	mov	r2, r0
 80004b8:      	cmp	r2, #0x63
 80004ba:      	bhi	0x80004e2 <core::fmt::num::imp::<impl core::fmt::Display for u32>::fmt::hf257a905c117f913+0xae> @ imm = #0x24
 80004bc:      	mov	r0, r2
 80004be:      	cmp	r0, #0xa
 80004c0:      	blo	0x8000510 <core::fmt::num::imp::<impl core::fmt::Display for u32>::fmt::hf257a905c117f913+0xdc> @ imm = #0x4c
 80004c2:      	sub.w	r9, r1, #0x2
 80004c6:      	movw	r1, #0x1610
 80004ca:      	movt	r1, #0x800
 80004ce:      	ldrh.w	r0, [r1, r0, lsl #1]
 80004d2:      	sub.w	r1, r7, #0x43
 80004d6:      	strh.w	r0, [r1, r9]
 80004da:      	b	0x800051e <core::fmt::num::imp::<impl core::fmt::Display for u32>::fmt::hf257a905c117f913+0xea> @ imm = #0x40
 80004dc:      	movs	r1, #0x27
 80004de:      	cmp	r2, #0x63
 80004e0:      	bls	0x80004bc <core::fmt::num::imp::<impl core::fmt::Display for u32>::fmt::hf257a905c117f913+0x88> @ imm = #-0x28
 80004e2:      	uxth	r0, r2
 80004e4:      	movw	r3, #0x147b
 80004e8:      	lsrs	r0, r0, #0x2
 80004ea:      	subs	r1, #0x2
 80004ec:      	muls	r0, r3, r0
 80004ee:      	mvn	r3, #0x63
 80004f2:      	lsrs	r0, r0, #0x11
 80004f4:      	smlabb	r2, r0, r3, r2
 80004f8:      	movw	r3, #0x1610
 80004fc:      	movt	r3, #0x800
 8000500:      	uxth	r2, r2
 8000502:      	ldrh.w	r2, [r3, r2, lsl #1]
 8000506:      	sub.w	r3, r7, #0x43
 800050a:      	strh	r2, [r3, r1]
 800050c:      	cmp	r0, #0xa
 800050e:      	bhs	0x80004c2 <core::fmt::num::imp::<impl core::fmt::Display for u32>::fmt::hf257a905c117f913+0x8e> @ imm = #-0x50
 8000510:      	sub.w	r9, r1, #0x1
 8000514:      	sub.w	r1, r7, #0x43
 8000518:      	adds	r0, #0x30
 800051a:      	strb.w	r0, [r1, r9]
 800051e:      	ldr	r0, [r6, #0x1c]
 8000520:      	movw	r3, #0x16d8
 8000524:      	add.w	r11, r1, r9
 8000528:      	ldr	r2, [r6]
 800052a:      	movt	r3, #0x800
 800052e:      	ands	r10, r0, #0x1
 8000532:      	lsl.w	r1, r0, #0x1d
 8000536:      	mov.w	r8, #0x2b
 800053a:      	and.w	r3, r3, r1, asr #31
 800053e:      	rsb.w	r1, r9, #0x27
 8000542:      	it	eq
 8000544:      	moveq.w	r8, #0x110000
 8000548:      	cbz	r2, 0x8000572 <core::fmt::num::imp::<impl core::fmt::Display for u32>::fmt::hf257a905c117f913+0x13e> @ imm = #0x26
 800054a:      	ldr	r5, [r6, #0x4]
 800054c:      	str	r1, [sp, #0x10]
 800054e:      	add	r1, r10
 8000550:      	cmp	r5, r1
 8000552:      	bls	0x8000590 <core::fmt::num::imp::<impl core::fmt::Display for u32>::fmt::hf257a905c117f913+0x15c> @ imm = #0x3a
 8000554:      	lsls	r0, r0, #0x1c
 8000556:      	bmi	0x80005c2 <core::fmt::num::imp::<impl core::fmt::Display for u32>::fmt::hf257a905c117f913+0x18e> @ imm = #0x68
 8000558:      	ldrb.w	r0, [r6, #0x20]
 800055c:      	sub.w	r10, r5, r1
 8000560:      	str	r3, [sp, #0xc]
 8000562:      	tbb	[pc, r0]

08000566 <$d.7>:
 8000566: 5e 02 58 02  	.word	0x0258025e

0800056a <$t.8>:
 800056a:      	mov	r0, r10
 800056c:      	mov.w	r10, #0x0
 8000570:      	b	0x8000622 <core::fmt::num::imp::<impl core::fmt::Display for u32>::fmt::hf257a905c117f913+0x1ee> @ imm = #0xae
 8000572:      	ldrd	r4, r5, [r6, #20]
 8000576:      	mov	r9, r1
 8000578:      	mov	r1, r5
 800057a:      	mov	r2, r8
 800057c:      	mov	r0, r4
 800057e:      	bl	0x80006b2 <core::fmt::Formatter::pad_integral::write_prefix::hd6de4bfe7adb906c> @ imm = #0x130
 8000582:      	cbz	r0, 0x80005ac <core::fmt::num::imp::<impl core::fmt::Display for u32>::fmt::hf257a905c117f913+0x178> @ imm = #0x26
 8000584:      	movs	r4, #0x1
 8000586:      	mov	r0, r4
 8000588:      	add	sp, #0x3c
 800058a:      	pop.w	{r8, r9, r10, r11}
 800058e:      	pop	{r4, r5, r6, r7, pc}
 8000590:      	ldrd	r4, r5, [r6, #20]
 8000594:      	mov	r2, r8
 8000596:      	mov	r1, r5
 8000598:      	mov	r0, r4
 800059a:      	bl	0x80006b2 <core::fmt::Formatter::pad_integral::write_prefix::hd6de4bfe7adb906c> @ imm = #0x114
 800059e:      	cmp	r0, #0x0
 80005a0:      	bne	0x800067c <core::fmt::num::imp::<impl core::fmt::Display for u32>::fmt::hf257a905c117f913+0x248> @ imm = #0xd8
 80005a2:      	ldr	r3, [r5, #0xc]
 80005a4:      	mov	r0, r4
 80005a6:      	ldr	r2, [sp, #0x10]
 80005a8:      	mov	r1, r11
 80005aa:      	b	0x80005b4 <core::fmt::num::imp::<impl core::fmt::Display for u32>::fmt::hf257a905c117f913+0x180> @ imm = #0x6
 80005ac:      	ldr	r3, [r5, #0xc]
 80005ae:      	mov	r0, r4
 80005b0:      	mov	r1, r11
 80005b2:      	mov	r2, r9
 80005b4:      	blx	r3
 80005b6:      	mov	r4, r0
 80005b8:      	mov	r0, r4
 80005ba:      	add	sp, #0x3c
 80005bc:      	pop.w	{r8, r9, r10, r11}
 80005c0:      	pop	{r4, r5, r6, r7, pc}
 80005c2:      	ldr	r0, [r6, #0x10]
 80005c4:      	movs	r2, #0x30
 80005c6:      	str.w	r11, [sp, #0x8]
 80005ca:      	movs	r4, #0x1
 80005cc:      	str	r0, [sp, #0x4]
 80005ce:      	ldrd	r0, r11, [r6, #20]
 80005d2:      	ldrb.w	r1, [r6, #0x20]
 80005d6:      	str	r1, [sp]
 80005d8:      	mov	r1, r11
 80005da:      	str	r2, [r6, #0x10]
 80005dc:      	mov	r2, r8
 80005de:      	strb.w	r4, [r6, #0x20]
 80005e2:      	str	r0, [sp, #0xc]
 80005e4:      	bl	0x80006b2 <core::fmt::Formatter::pad_integral::write_prefix::hd6de4bfe7adb906c> @ imm = #0xca
 80005e8:      	cbz	r0, 0x80005f4 <core::fmt::num::imp::<impl core::fmt::Display for u32>::fmt::hf257a905c117f913+0x1c0> @ imm = #0x8
 80005ea:      	mov	r0, r4
 80005ec:      	add	sp, #0x3c
 80005ee:      	pop.w	{r8, r9, r10, r11}
 80005f2:      	pop	{r4, r5, r6, r7, pc}
 80005f4:      	add.w	r0, r9, r5
 80005f8:      	ldr	r5, [sp, #0xc]
 80005fa:      	sub.w	r0, r0, r10
 80005fe:      	sub.w	r4, r0, #0x26
 8000602:      	subs	r4, #0x1
 8000604:      	beq	0x800066e <core::fmt::num::imp::<impl core::fmt::Display for u32>::fmt::hf257a905c117f913+0x23a> @ imm = #0x66
 8000606:      	ldr.w	r2, [r11, #0x10]
 800060a:      	mov	r0, r5
 800060c:      	movs	r1, #0x30
 800060e:      	blx	r2
 8000610:      	cmp	r0, #0x0
 8000612:      	beq	0x8000602 <core::fmt::num::imp::<impl core::fmt::Display for u32>::fmt::hf257a905c117f913+0x1ce> @ imm = #-0x14
 8000614:      	b	0x800067c <core::fmt::num::imp::<impl core::fmt::Display for u32>::fmt::hf257a905c117f913+0x248> @ imm = #0x64
 8000616:      	add.w	r1, r10, #0x1
 800061a:      	lsr.w	r0, r10, #0x1
 800061e:      	lsr.w	r10, r1, #0x1
 8000622:      	ldrd	r9, r4, [r6, #16]
 8000626:      	ldr	r5, [r6, #0x18]
 8000628:      	adds	r6, r0, #0x1
 800062a:      	subs	r6, #0x1
 800062c:      	beq	0x800063c <core::fmt::num::imp::<impl core::fmt::Display for u32>::fmt::hf257a905c117f913+0x208> @ imm = #0xc
 800062e:      	ldr	r2, [r5, #0x10]
 8000630:      	mov	r0, r4
 8000632:      	mov	r1, r9
 8000634:      	blx	r2
 8000636:      	cmp	r0, #0x0
 8000638:      	beq	0x800062a <core::fmt::num::imp::<impl core::fmt::Display for u32>::fmt::hf257a905c117f913+0x1f6> @ imm = #-0x12
 800063a:      	b	0x800067c <core::fmt::num::imp::<impl core::fmt::Display for u32>::fmt::hf257a905c117f913+0x248> @ imm = #0x3e
 800063c:      	ldr	r3, [sp, #0xc]
 800063e:      	mov	r0, r4
 8000640:      	mov	r1, r5
 8000642:      	mov	r2, r8
 8000644:      	bl	0x80006b2 <core::fmt::Formatter::pad_integral::write_prefix::hd6de4bfe7adb906c> @ imm = #0x6a
 8000648:      	cbnz	r0, 0x800067c <core::fmt::num::imp::<impl core::fmt::Display for u32>::fmt::hf257a905c117f913+0x248> @ imm = #0x30
 800064a:      	ldr	r3, [r5, #0xc]
 800064c:      	mov	r0, r4
 800064e:      	ldr	r2, [sp, #0x10]
 8000650:      	mov	r1, r11
 8000652:      	blx	r3
 8000654:      	cbnz	r0, 0x800067c <core::fmt::num::imp::<impl core::fmt::Display for u32>::fmt::hf257a905c117f913+0x248> @ imm = #0x24
 8000656:      	movs	r6, #0x0
 8000658:      	cmp	r10, r6
 800065a:      	beq	0x800069e <core::fmt::num::imp::<impl core::fmt::Display for u32>::fmt::hf257a905c117f913+0x26a> @ imm = #0x40
 800065c:      	ldr	r2, [r5, #0x10]
 800065e:      	mov	r0, r4
 8000660:      	mov	r1, r9
 8000662:      	blx	r2
 8000664:      	adds	r6, #0x1
 8000666:      	cmp	r0, #0x0
 8000668:      	beq	0x8000658 <core::fmt::num::imp::<impl core::fmt::Display for u32>::fmt::hf257a905c117f913+0x224> @ imm = #-0x14
 800066a:      	subs	r0, r6, #0x1
 800066c:      	b	0x80006a0 <core::fmt::num::imp::<impl core::fmt::Display for u32>::fmt::hf257a905c117f913+0x26c> @ imm = #0x30
 800066e:      	ldr.w	r3, [r11, #0xc]
 8000672:      	mov	r0, r5
 8000674:      	ldr	r1, [sp, #0x8]
 8000676:      	ldr	r2, [sp, #0x10]
 8000678:      	blx	r3
 800067a:      	cbz	r0, 0x8000688 <core::fmt::num::imp::<impl core::fmt::Display for u32>::fmt::hf257a905c117f913+0x254> @ imm = #0xa
 800067c:      	movs	r4, #0x1
 800067e:      	mov	r0, r4
 8000680:      	add	sp, #0x3c
 8000682:      	pop.w	{r8, r9, r10, r11}
 8000686:      	pop	{r4, r5, r6, r7, pc}
 8000688:      	ldr	r0, [sp]
 800068a:      	movs	r4, #0x0
 800068c:      	strb.w	r0, [r6, #0x20]
 8000690:      	ldr	r0, [sp, #0x4]
 8000692:      	str	r0, [r6, #0x10]
 8000694:      	mov	r0, r4
 8000696:      	add	sp, #0x3c
 8000698:      	pop.w	{r8, r9, r10, r11}
 800069c:      	pop	{r4, r5, r6, r7, pc}
 800069e:      	mov	r0, r10
 80006a0:      	movs	r4, #0x0
 80006a2:      	cmp	r0, r10
 80006a4:      	it	lo
 80006a6:      	movlo	r4, #0x1
 80006a8:      	mov	r0, r4
 80006aa:      	add	sp, #0x3c
 80006ac:      	pop.w	{r8, r9, r10, r11}
 80006b0:      	pop	{r4, r5, r6, r7, pc}

080006b2 <core::fmt::Formatter::pad_integral::write_prefix::hd6de4bfe7adb906c>:
 80006b2:      	push	{r4, r5, r6, r7, lr}
 80006b4:      	add	r7, sp, #0xc
 80006b6:      	str	r11, [sp, #-4]!
 80006ba:      	mov	r4, r3
 80006bc:      	mov	r6, r1
 80006be:      	mov	r5, r0
 80006c0:      	cmp.w	r2, #0x110000
 80006c4:      	beq	0x80006d8 <core::fmt::Formatter::pad_integral::write_prefix::hd6de4bfe7adb906c+0x26> @ imm = #0x10
 80006c6:      	ldr	r3, [r6, #0x10]
 80006c8:      	mov	r0, r5
 80006ca:      	mov	r1, r2
 80006cc:      	blx	r3
 80006ce:      	cbz	r0, 0x80006d8 <core::fmt::Formatter::pad_integral::write_prefix::hd6de4bfe7adb906c+0x26> @ imm = #0x6
 80006d0:      	movs	r0, #0x1
 80006d2:      	ldr	r11, [sp], #4
 80006d6:      	pop	{r4, r5, r6, r7, pc}
 80006d8:      	cbz	r4, 0x80006ec <core::fmt::Formatter::pad_integral::write_prefix::hd6de4bfe7adb906c+0x3a> @ imm = #0x10
 80006da:      	ldr	r3, [r6, #0xc]
 80006dc:      	mov	r0, r5
 80006de:      	mov	r1, r4
 80006e0:      	movs	r2, #0x0
 80006e2:      	ldr	r11, [sp], #4
 80006e6:      	pop.w	{r4, r5, r6, r7, lr}
 80006ea:      	bx	r3
 80006ec:      	movs	r0, #0x0
 80006ee:      	ldr	r11, [sp], #4
 80006f2:      	pop	{r4, r5, r6, r7, pc}

080006f4 <core::panicking::panic::h952fce1e2a743e07>:
 80006f4:      	push	{r7, lr}
 80006f6:      	mov	r7, sp
 80006f8:      	sub	sp, #0x20
 80006fa:      	movs	r0, #0x0
 80006fc:      	movs	r1, #0x1
 80006fe:      	str	r0, [sp, #0x10]
 8000700:      	str	r0, [sp, #0xc]
 8000702:      	movw	r0, #0x16d8
 8000706:      	movt	r0, #0x800
 800070a:      	str	r1, [sp, #0x4]
 800070c:      	str	r0, [sp, #0x8]
 800070e:      	movs	r0, #0x2b
 8000710:      	str	r0, [sp, #0x1c]
 8000712:      	movw	r0, #0x156c
 8000716:      	movt	r0, #0x800
 800071a:      	add	r1, sp, #0x18
 800071c:      	str	r0, [sp, #0x18]
 800071e:      	mov	r0, sp
 8000720:      	str	r1, [sp]
 8000722:      	bl	0x80003dc <core::panicking::panic_fmt::h7b521c9693495a00> @ imm = #-0x34a
 8000726:      	bmi	0x80006d2 <core::fmt::Formatter::pad_integral::write_prefix::hd6de4bfe7adb906c+0x20> @ imm = #-0x58

08000728 <<&T as core::fmt::Display>::fmt::h334ee89cbdea99d4>:
 8000728:      	push	{r4, r5, r6, r7, lr}
 800072a:      	add	r7, sp, #0xc
 800072c:      	push.w	{r8, r9, r10, r11}
 8000730:      	sub	sp, #0x14
 8000732:      	ldr.w	r12, [r1]
 8000736:      	ldr	r3, [r1, #0x8]
 8000738:      	ldrd	r10, r2, [r0]
 800073c:      	orrs.w	r0, r12, r3
 8000740:      	bne	0x8000748 <<&T as core::fmt::Display>::fmt::h334ee89cbdea99d4+0x20> @ imm = #0x4
 8000742:      	ldrd	r0, r1, [r1, #20]
 8000746:      	b	0x8000e28 <<&T as core::fmt::Display>::fmt::h334ee89cbdea99d4+0x700> @ imm = #0x6de
 8000748:      	cmp	r3, #0x0
 800074a:      	beq	0x8000834 <<&T as core::fmt::Display>::fmt::h334ee89cbdea99d4+0x10c> @ imm = #0xe6
 800074c:      	ldr	r0, [r1, #0xc]
 800074e:      	add.w	lr, r10, r2
 8000752:      	mov.w	r8, #0x0
 8000756:      	adds	r5, r0, #0x1
 8000758:      	mov	r0, r10
 800075a:      	b	0x8000770 <<&T as core::fmt::Display>::fmt::h334ee89cbdea99d4+0x48> @ imm = #0x12
 800075c:      	orr.w	r4, r6, r9, lsl #6
 8000760:      	adds	r0, r3, #0x2
 8000762:      	sub.w	r3, r8, r3
 8000766:      	cmp.w	r4, #0x110000
 800076a:      	add.w	r8, r3, r0
 800076e:      	beq	0x8000834 <<&T as core::fmt::Display>::fmt::h334ee89cbdea99d4+0x10c> @ imm = #0xc2
 8000770:      	subs	r5, #0x1
 8000772:      	mov	r3, r0
 8000774:      	beq	0x80007c8 <<&T as core::fmt::Display>::fmt::h334ee89cbdea99d4+0xa0> @ imm = #0x50
 8000776:      	cmp	r3, lr
 8000778:      	beq	0x8000834 <<&T as core::fmt::Display>::fmt::h334ee89cbdea99d4+0x10c> @ imm = #0xb8
 800077a:      	mov	r0, r3
 800077c:      	ldrsb	r6, [r0], #1
 8000780:      	cmp.w	r6, #0xffffffff
 8000784:      	uxtb	r4, r6
 8000786:      	bgt	0x8000762 <<&T as core::fmt::Display>::fmt::h334ee89cbdea99d4+0x3a> @ imm = #-0x28
 8000788:      	ldrb	r6, [r3, #0x1]
 800078a:      	and	r9, r4, #0x1f
 800078e:      	cmp	r4, #0xdf
 8000790:      	and	r6, r6, #0x3f
 8000794:      	bls	0x800075c <<&T as core::fmt::Display>::fmt::h334ee89cbdea99d4+0x34> @ imm = #-0x3c
 8000796:      	ldrb	r0, [r3, #0x2]
 8000798:      	cmp	r4, #0xf0
 800079a:      	and	r0, r0, #0x3f
 800079e:      	orr.w	r6, r0, r6, lsl #6
 80007a2:      	blo	0x80007c0 <<&T as core::fmt::Display>::fmt::h334ee89cbdea99d4+0x98> @ imm = #0x1a
 80007a4:      	ldrb	r0, [r3, #0x3]
 80007a6:      	and	r4, r9, #0x7
 80007aa:      	and	r0, r0, #0x3f
 80007ae:      	orr.w	r0, r0, r6, lsl #6
 80007b2:      	orr.w	r4, r0, r4, lsl #18
 80007b6:      	cmp.w	r4, #0x110000
 80007ba:      	beq	0x8000834 <<&T as core::fmt::Display>::fmt::h334ee89cbdea99d4+0x10c> @ imm = #0x76
 80007bc:      	adds	r0, r3, #0x4
 80007be:      	b	0x8000762 <<&T as core::fmt::Display>::fmt::h334ee89cbdea99d4+0x3a> @ imm = #-0x60
 80007c0:      	orr.w	r4, r6, r9, lsl #12
 80007c4:      	adds	r0, r3, #0x3
 80007c6:      	b	0x8000762 <<&T as core::fmt::Display>::fmt::h334ee89cbdea99d4+0x3a> @ imm = #-0x68
 80007c8:      	cmp	r3, lr
 80007ca:      	beq	0x8000834 <<&T as core::fmt::Display>::fmt::h334ee89cbdea99d4+0x10c> @ imm = #0x66
 80007cc:      	ldrsb.w	r0, [r3]
 80007d0:      	cmp.w	r0, #0xffffffff
 80007d4:      	bgt	0x80007e0 <<&T as core::fmt::Display>::fmt::h334ee89cbdea99d4+0xb8> @ imm = #0x8
 80007d6:      	uxtb	r0, r0
 80007d8:      	cmp	r0, #0xe0
 80007da:      	it	hs
 80007dc:      	cmphs	r0, #0xf0
 80007de:      	bhs	0x800080c <<&T as core::fmt::Display>::fmt::h334ee89cbdea99d4+0xe4> @ imm = #0x2a
 80007e0:      	cmp.w	r8, #0x0
 80007e4:      	beq	0x80007fa <<&T as core::fmt::Display>::fmt::h334ee89cbdea99d4+0xd2> @ imm = #0x12
 80007e6:      	cmp	r8, r2
 80007e8:      	bhs	0x80007f8 <<&T as core::fmt::Display>::fmt::h334ee89cbdea99d4+0xd0> @ imm = #0xc
 80007ea:      	ldrsb.w	r0, [r10, r8]
 80007ee:      	cmn.w	r0, #0x40
 80007f2:      	bge	0x80007fa <<&T as core::fmt::Display>::fmt::h334ee89cbdea99d4+0xd2> @ imm = #0x4
 80007f4:      	movs	r0, #0x0
 80007f6:      	b	0x80007fc <<&T as core::fmt::Display>::fmt::h334ee89cbdea99d4+0xd4> @ imm = #0x2
 80007f8:      	bne	0x80007f4 <<&T as core::fmt::Display>::fmt::h334ee89cbdea99d4+0xcc> @ imm = #-0x8
 80007fa:      	mov	r0, r10
 80007fc:      	cmp	r0, #0x0
 80007fe:      	ite	eq
 8000800:      	moveq	r8, r2
 8000802:      	movne	r10, r0
 8000804:      	cmp.w	r12, #0x0
 8000808:      	bne	0x800083e <<&T as core::fmt::Display>::fmt::h334ee89cbdea99d4+0x116> @ imm = #0x32
 800080a:      	b	0x8000e22 <<&T as core::fmt::Display>::fmt::h334ee89cbdea99d4+0x6fa> @ imm = #0x614
 800080c:      	ldrb	r6, [r3, #0x1]
 800080e:      	and	r0, r0, #0x7
 8000812:      	ldrb	r5, [r3, #0x2]
 8000814:      	ldrb	r3, [r3, #0x3]
 8000816:      	and	r6, r6, #0x3f
 800081a:      	and	r5, r5, #0x3f
 800081e:      	and	r3, r3, #0x3f
 8000822:      	lsls	r5, r5, #0x6
 8000824:      	orr.w	r6, r5, r6, lsl #12
 8000828:      	add	r3, r6
 800082a:      	orr.w	r0, r3, r0, lsl #18
 800082e:      	cmp.w	r0, #0x110000
 8000832:      	bne	0x80007e0 <<&T as core::fmt::Display>::fmt::h334ee89cbdea99d4+0xb8> @ imm = #-0x56
 8000834:      	mov	r8, r2
 8000836:      	cmp.w	r12, #0x0
 800083a:      	beq.w	0x8000e22 <<&T as core::fmt::Display>::fmt::h334ee89cbdea99d4+0x6fa> @ imm = #0x5e4
 800083e:      	ldr	r4, [r1, #0x4]
 8000840:      	cmp.w	r8, #0x10
 8000844:      	bhs	0x800085e <<&T as core::fmt::Display>::fmt::h334ee89cbdea99d4+0x136> @ imm = #0x16
 8000846:      	cmp.w	r8, #0x0
 800084a:      	beq	0x8000894 <<&T as core::fmt::Display>::fmt::h334ee89cbdea99d4+0x16c> @ imm = #0x46
 800084c:      	and	r0, r8, #0x3
 8000850:      	mov.w	lr, #0x0
 8000854:      	cmp.w	r8, #0x4
 8000858:      	bhs	0x80008a0 <<&T as core::fmt::Display>::fmt::h334ee89cbdea99d4+0x178> @ imm = #0x44
 800085a:      	movs	r3, #0x0
 800085c:      	b	0x8000954 <<&T as core::fmt::Display>::fmt::h334ee89cbdea99d4+0x22c> @ imm = #0xf4
 800085e:      	add.w	r0, r10, #0x3
 8000862:      	str	r4, [sp]
 8000864:      	bic	r9, r0, #0x3
 8000868:      	str.w	r8, [sp, #0x8]
 800086c:      	subs.w	r0, r9, r10
 8000870:      	str	r1, [sp, #0x4]
 8000872:      	sub.w	r8, r8, r0
 8000876:      	and	r3, r8, #0x3
 800087a:      	bne	0x8000880 <<&T as core::fmt::Display>::fmt::h334ee89cbdea99d4+0x158> @ imm = #0x2
 800087c:      	movs	r0, #0x0
 800087e:      	b	0x8000a9a <<&T as core::fmt::Display>::fmt::h334ee89cbdea99d4+0x372> @ imm = #0x218
 8000880:      	mov	r1, r0
 8000882:      	mvn.w	r0, r10
 8000886:      	add	r0, r9
 8000888:      	str	r3, [sp, #0x10]
 800088a:      	cmp	r0, #0x3
 800088c:      	bhs.w	0x80009a0 <<&T as core::fmt::Display>::fmt::h334ee89cbdea99d4+0x278> @ imm = #0x110
 8000890:      	movs	r0, #0x0
 8000892:      	b	0x8000a6c <<&T as core::fmt::Display>::fmt::h334ee89cbdea99d4+0x344> @ imm = #0x1d6
 8000894:      	mov.w	lr, #0x0
 8000898:      	cmp	r4, lr
 800089a:      	bhi.w	0x8000da0 <<&T as core::fmt::Display>::fmt::h334ee89cbdea99d4+0x678> @ imm = #0x502
 800089e:      	b	0x8000e22 <<&T as core::fmt::Display>::fmt::h334ee89cbdea99d4+0x6fa> @ imm = #0x580
 80008a0:      	ldrsb.w	r2, [r10, #0x1]
 80008a4:      	ldrsb.w	r6, [r10]
 80008a8:      	ldrsb.w	r3, [r10, #0x2]
 80008ac:      	cmn.w	r2, #0x41
 80008b0:      	ldrsb.w	r5, [r10, #0x3]
 80008b4:      	it	gt
 80008b6:      	movgt.w	lr, #0x1
 80008ba:      	cmn.w	r6, #0x41
 80008be:      	it	gt
 80008c0:      	addgt.w	lr, lr, #0x1
 80008c4:      	cmn.w	r3, #0x41
 80008c8:      	it	gt
 80008ca:      	addgt.w	lr, lr, #0x1
 80008ce:      	cmn.w	r5, #0x41
 80008d2:      	bic	r3, r8, #0x3
 80008d6:      	it	gt
 80008d8:      	addgt.w	lr, lr, #0x1
 80008dc:      	cmp	r3, #0x4
 80008de:      	beq	0x8000954 <<&T as core::fmt::Display>::fmt::h334ee89cbdea99d4+0x22c> @ imm = #0x72
 80008e0:      	ldrsb.w	r6, [r10, #0x4]
 80008e4:      	ldrsb.w	r5, [r10, #0x5]
 80008e8:      	ldrsb.w	r2, [r10, #0x6]
 80008ec:      	cmn.w	r6, #0x41
 80008f0:      	ldrsb.w	r12, [r10, #0x7]
 80008f4:      	it	gt
 80008f6:      	addgt.w	lr, lr, #0x1
 80008fa:      	cmn.w	r5, #0x41
 80008fe:      	it	gt
 8000900:      	addgt.w	lr, lr, #0x1
 8000904:      	cmn.w	r2, #0x41
 8000908:      	it	gt
 800090a:      	addgt.w	lr, lr, #0x1
 800090e:      	cmn.w	r12, #0x41
 8000912:      	it	gt
 8000914:      	addgt.w	lr, lr, #0x1
 8000918:      	cmp	r3, #0x8
 800091a:      	beq	0x8000954 <<&T as core::fmt::Display>::fmt::h334ee89cbdea99d4+0x22c> @ imm = #0x36
 800091c:      	ldrsb.w	r6, [r10, #0x8]
 8000920:      	ldrsb.w	r5, [r10, #0x9]
 8000924:      	ldrsb.w	r2, [r10, #0xa]
 8000928:      	cmn.w	r6, #0x41
 800092c:      	ldrsb.w	r12, [r10, #0xb]
 8000930:      	it	gt
 8000932:      	addgt.w	lr, lr, #0x1
 8000936:      	cmn.w	r5, #0x41
 800093a:      	it	gt
 800093c:      	addgt.w	lr, lr, #0x1
 8000940:      	cmn.w	r2, #0x41
 8000944:      	it	gt
 8000946:      	addgt.w	lr, lr, #0x1
 800094a:      	cmn.w	r12, #0x41
 800094e:      	it	gt
 8000950:      	addgt.w	lr, lr, #0x1
 8000954:      	cmp	r0, #0x0
 8000956:      	beq.w	0x8000d9c <<&T as core::fmt::Display>::fmt::h334ee89cbdea99d4+0x674> @ imm = #0x442
 800095a:      	ldrsb.w	r2, [r10, r3]
 800095e:      	cmn.w	r2, #0x41
 8000962:      	it	gt
 8000964:      	addgt.w	lr, lr, #0x1
 8000968:      	cmp	r0, #0x1
 800096a:      	beq.w	0x8000d9c <<&T as core::fmt::Display>::fmt::h334ee89cbdea99d4+0x674> @ imm = #0x42e
 800096e:      	orr	r2, r3, #0x1
 8000972:      	ldrsb.w	r2, [r10, r2]
 8000976:      	cmn.w	r2, #0x41
 800097a:      	it	gt
 800097c:      	addgt.w	lr, lr, #0x1
 8000980:      	cmp	r0, #0x2
 8000982:      	beq.w	0x8000d9c <<&T as core::fmt::Display>::fmt::h334ee89cbdea99d4+0x674> @ imm = #0x416
 8000986:      	orr	r0, r3, #0x2
 800098a:      	ldrsb.w	r0, [r10, r0]
 800098e:      	cmn.w	r0, #0x41
 8000992:      	it	gt
 8000994:      	addgt.w	lr, lr, #0x1
 8000998:      	cmp	r4, lr
 800099a:      	bhi.w	0x8000da0 <<&T as core::fmt::Display>::fmt::h334ee89cbdea99d4+0x678> @ imm = #0x402
 800099e:      	b	0x8000e22 <<&T as core::fmt::Display>::fmt::h334ee89cbdea99d4+0x6fa> @ imm = #0x480
 80009a0:      	movs	r0, #0x0
 80009a2:      	movs	r4, #0x0
 80009a4:      	add.w	r2, r10, r4
 80009a8:      	ldrsb.w	r12, [r10, r4]
 80009ac:      	ldrsb.w	lr, [r2, #0x1]
 80009b0:      	ldrsb.w	r11, [r2, #0xe]
 80009b4:      	cmn.w	r12, #0x41
 80009b8:      	ldrsb.w	r3, [r2, #0xd]
 80009bc:      	ldrsb.w	r5, [r2, #0xc]
 80009c0:      	it	gt
 80009c2:      	addgt	r0, #0x1
 80009c4:      	ldrsb.w	r6, [r2, #0x2]
 80009c8:      	cmn.w	lr, #0x41
 80009cc:      	it	gt
 80009ce:      	addgt	r0, #0x1
 80009d0:      	ldrsb.w	r12, [r2, #0x3]
 80009d4:      	cmn.w	r6, #0x41
 80009d8:      	it	gt
 80009da:      	addgt	r0, #0x1
 80009dc:      	ldrsb.w	r6, [r2, #0x4]
 80009e0:      	cmn.w	r12, #0x41
 80009e4:      	it	gt
 80009e6:      	addgt	r0, #0x1
 80009e8:      	ldrsb.w	r12, [r2, #0x5]
 80009ec:      	cmn.w	r6, #0x41
 80009f0:      	it	gt
 80009f2:      	addgt	r0, #0x1
 80009f4:      	ldrsb.w	r6, [r2, #0x6]
 80009f8:      	cmn.w	r12, #0x41
 80009fc:      	it	gt
 80009fe:      	addgt	r0, #0x1
 8000a00:      	ldrsb.w	r12, [r2, #0x7]
 8000a04:      	cmn.w	r6, #0x41
 8000a08:      	it	gt
 8000a0a:      	addgt	r0, #0x1
 8000a0c:      	ldrsb.w	r6, [r2, #0x8]
 8000a10:      	cmn.w	r12, #0x41
 8000a14:      	it	gt
 8000a16:      	addgt	r0, #0x1
 8000a18:      	ldrsb.w	r12, [r2, #0x9]
 8000a1c:      	cmn.w	r6, #0x41
 8000a20:      	it	gt
 8000a22:      	addgt	r0, #0x1
 8000a24:      	ldrsb.w	r6, [r2, #0xb]
 8000a28:      	cmn.w	r12, #0x41
 8000a2c:      	it	gt
 8000a2e:      	addgt	r0, #0x1
 8000a30:      	ldrsb.w	r12, [r2, #0xf]
 8000a34:      	ldrsb.w	r2, [r2, #0xa]
 8000a38:      	cmn.w	r2, #0x41
 8000a3c:      	it	gt
 8000a3e:      	addgt	r0, #0x1
 8000a40:      	cmn.w	r6, #0x41
 8000a44:      	it	gt
 8000a46:      	addgt	r0, #0x1
 8000a48:      	cmn.w	r5, #0x41
 8000a4c:      	it	gt
 8000a4e:      	addgt	r0, #0x1
 8000a50:      	cmn.w	r3, #0x41
 8000a54:      	it	gt
 8000a56:      	addgt	r0, #0x1
 8000a58:      	cmn.w	r11, #0x41
 8000a5c:      	it	gt
 8000a5e:      	addgt	r0, #0x1
 8000a60:      	cmn.w	r12, #0x41
 8000a64:      	it	gt
 8000a66:      	addgt	r0, #0x1
 8000a68:      	adds	r4, #0x10
 8000a6a:      	bne	0x80009a4 <<&T as core::fmt::Display>::fmt::h334ee89cbdea99d4+0x27c> @ imm = #-0xca
 8000a6c:      	ldrsb.w	r2, [r10]
 8000a70:      	cmn.w	r2, #0x41
 8000a74:      	it	gt
 8000a76:      	addgt	r0, #0x1
 8000a78:      	ldr	r3, [sp, #0x10]
 8000a7a:      	cmp	r1, #0x1
 8000a7c:      	beq	0x8000a9a <<&T as core::fmt::Display>::fmt::h334ee89cbdea99d4+0x372> @ imm = #0x1a
 8000a7e:      	ldrsb.w	r2, [r10, #0x1]
 8000a82:      	cmn.w	r2, #0x41
 8000a86:      	it	gt
 8000a88:      	addgt	r0, #0x1
 8000a8a:      	cmp	r1, #0x2
 8000a8c:      	beq	0x8000a9a <<&T as core::fmt::Display>::fmt::h334ee89cbdea99d4+0x372> @ imm = #0xa
 8000a8e:      	ldrsb.w	r2, [r10, #0x2]
 8000a92:      	cmn.w	r2, #0x41
 8000a96:      	it	gt
 8000a98:      	addgt	r0, #0x1
 8000a9a:      	str.w	r10, [sp, #0xc]
 8000a9e:      	lsr.w	r10, r8, #0x2
 8000aa2:      	movs	r2, #0x0
 8000aa4:      	cbz	r3, 0x8000ada <<&T as core::fmt::Display>::fmt::h334ee89cbdea99d4+0x3b2> @ imm = #0x32
 8000aa6:      	bic	r6, r8, #0x3
 8000aaa:      	add.w	r5, r9, r6
 8000aae:      	ldrsb.w	r6, [r5]
 8000ab2:      	cmn.w	r6, #0x41
 8000ab6:      	it	gt
 8000ab8:      	movgt	r2, #0x1
 8000aba:      	cmp	r3, #0x1
 8000abc:      	beq	0x8000ada <<&T as core::fmt::Display>::fmt::h334ee89cbdea99d4+0x3b2> @ imm = #0x1a
 8000abe:      	ldrsb.w	r6, [r5, #0x1]
 8000ac2:      	cmn.w	r6, #0x41
 8000ac6:      	it	gt
 8000ac8:      	addgt	r2, #0x1
 8000aca:      	cmp	r3, #0x2
 8000acc:      	beq	0x8000ada <<&T as core::fmt::Display>::fmt::h334ee89cbdea99d4+0x3b2> @ imm = #0xa
 8000ace:      	ldrsb.w	r6, [r5, #0x2]
 8000ad2:      	cmn.w	r6, #0x41
 8000ad6:      	it	gt
 8000ad8:      	addgt	r2, #0x1
 8000ada:      	add.w	lr, r2, r0
 8000ade:      	b	0x8000b06 <<&T as core::fmt::Display>::fmt::h334ee89cbdea99d4+0x3de> @ imm = #0x24
 8000ae0:      	mov.w	r12, #0x0
 8000ae4:      	uxtb16	r1, r12
 8000ae8:      	uxtb16	r2, r12, ror #8
 8000aec:      	add	r1, r2
 8000aee:      	sub.w	r10, r10, r11
 8000af2:      	add.w	r9, r8, r11, lsl #2
 8000af6:      	ands	r0, r11, #0x3
 8000afa:      	add.w	r1, r1, r1, lsl #16
 8000afe:      	add.w	lr, lr, r1, lsr #16
 8000b02:      	bne.w	0x8000dba <<&T as core::fmt::Display>::fmt::h334ee89cbdea99d4+0x692> @ imm = #0x2b4
 8000b06:      	cmp.w	r10, #0x0
 8000b0a:      	beq.w	0x8000d94 <<&T as core::fmt::Display>::fmt::h334ee89cbdea99d4+0x66c> @ imm = #0x286
 8000b0e:      	cmp.w	r10, #0xc0
 8000b12:      	mov	r11, r10
 8000b14:      	it	hs
 8000b16:      	movhs.w	r11, #0xc0
 8000b1a:      	mov	r8, r9
 8000b1c:      	cmp.w	r11, #0x4
 8000b20:      	blo	0x8000ae0 <<&T as core::fmt::Display>::fmt::h334ee89cbdea99d4+0x3b8> @ imm = #-0x44
 8000b22:      	mvn	r0, #0xf
 8000b26:      	movs	r1, #0x1
 8000b28:      	add.w	r0, r0, r11, lsl #2
 8000b2c:      	cmp	r0, #0x30
 8000b2e:      	add.w	r1, r1, r0, lsr #4
 8000b32:      	bhs	0x8000b44 <<&T as core::fmt::Display>::fmt::h334ee89cbdea99d4+0x41c> @ imm = #0xe
 8000b34:      	mov.w	r12, #0x0
 8000b38:      	mov	r6, r8
 8000b3a:      	ands	r0, r1, #0x3
 8000b3e:      	bne.w	0x8000ca8 <<&T as core::fmt::Display>::fmt::h334ee89cbdea99d4+0x580> @ imm = #0x166
 8000b42:      	b	0x8000ae4 <<&T as core::fmt::Display>::fmt::h334ee89cbdea99d4+0x3bc> @ imm = #-0x62
 8000b44:      	bic	r5, r1, #0x3
 8000b48:      	mov.w	r12, #0x0
 8000b4c:      	mov	r6, r8
 8000b4e:      	str	r1, [sp, #0x10]
 8000b50:      	ldm.w	r6, {r0, r2, r4}
 8000b54:      	subs	r5, #0x4
 8000b56:      	ldr	r3, [r6, #0xc]
 8000b58:      	mvn.w	r9, r0
 8000b5c:      	lsr.w	r1, r9, #0x7
 8000b60:      	orr.w	r0, r1, r0, lsr #6
 8000b64:      	mvn.w	r1, r2
 8000b68:      	bic	r0, r0, #0xfefefefe
 8000b6c:      	lsr.w	r1, r1, #0x7
 8000b70:      	add	r0, r12
 8000b72:      	orr.w	r1, r1, r2, lsr #6
 8000b76:      	ldr.w	r9, [r6, #0x38]
 8000b7a:      	bic	r1, r1, #0xfefefefe
 8000b7e:      	ldr.w	r12, [r6, #0x3c]
 8000b82:      	add	r1, r0
 8000b84:      	mvn.w	r0, r4
 8000b88:      	lsr.w	r2, r0, #0x7
 8000b8c:      	ldr	r0, [r6, #0x14]
 8000b8e:      	orr.w	r2, r2, r4, lsr #6
 8000b92:      	ldr	r4, [r6, #0x10]
 8000b94:      	bic	r2, r2, #0xfefefefe
 8000b98:      	add	r1, r2
 8000b9a:      	mvn.w	r2, r3
 8000b9e:      	lsr.w	r2, r2, #0x7
 8000ba2:      	orr.w	r2, r2, r3, lsr #6
 8000ba6:      	ldr	r3, [r6, #0x18]
 8000ba8:      	bic	r2, r2, #0xfefefefe
 8000bac:      	add	r1, r2
 8000bae:      	mvn.w	r2, r4
 8000bb2:      	lsr.w	r2, r2, #0x7
 8000bb6:      	orr.w	r2, r2, r4, lsr #6
 8000bba:      	ldr	r4, [r6, #0x1c]
 8000bbc:      	bic	r2, r2, #0xfefefefe
 8000bc0:      	add	r1, r2
 8000bc2:      	mvn.w	r2, r0
 8000bc6:      	lsr.w	r2, r2, #0x7
 8000bca:      	orr.w	r0, r2, r0, lsr #6
 8000bce:      	bic	r0, r0, #0xfefefefe
 8000bd2:      	ldr	r2, [r6, #0x20]
 8000bd4:      	add	r0, r1
 8000bd6:      	mvn.w	r1, r3
 8000bda:      	lsr.w	r1, r1, #0x7
 8000bde:      	orr.w	r1, r1, r3, lsr #6
 8000be2:      	ldr	r3, [r6, #0x24]
 8000be4:      	bic	r1, r1, #0xfefefefe
 8000be8:      	add	r0, r1
 8000bea:      	mvn.w	r1, r4
 8000bee:      	lsr.w	r1, r1, #0x7
 8000bf2:      	orr.w	r1, r1, r4, lsr #6
 8000bf6:      	ldr	r4, [r6, #0x28]
 8000bf8:      	bic	r1, r1, #0xfefefefe
 8000bfc:      	add	r0, r1
 8000bfe:      	mvn.w	r1, r2
 8000c02:      	lsr.w	r1, r1, #0x7
 8000c06:      	orr.w	r1, r1, r2, lsr #6
 8000c0a:      	ldr	r2, [r6, #0x2c]
 8000c0c:      	bic	r1, r1, #0xfefefefe
 8000c10:      	add	r0, r1
 8000c12:      	mvn.w	r1, r3
 8000c16:      	lsr.w	r1, r1, #0x7
 8000c1a:      	orr.w	r1, r1, r3, lsr #6
 8000c1e:      	ldr	r3, [r6, #0x30]
 8000c20:      	bic	r1, r1, #0xfefefefe
 8000c24:      	add	r0, r1
 8000c26:      	mvn.w	r1, r4
 8000c2a:      	lsr.w	r1, r1, #0x7
 8000c2e:      	orr.w	r1, r1, r4, lsr #6
 8000c32:      	ldr	r4, [r6, #0x34]
 8000c34:      	bic	r1, r1, #0xfefefefe
 8000c38:      	add.w	r6, r6, #0x40
 8000c3c:      	add	r0, r1
 8000c3e:      	mvn.w	r1, r2
 8000c42:      	lsr.w	r1, r1, #0x7
 8000c46:      	orr.w	r1, r1, r2, lsr #6
 8000c4a:      	bic	r1, r1, #0xfefefefe
 8000c4e:      	add	r0, r1
 8000c50:      	mvn.w	r1, r3
 8000c54:      	lsr.w	r1, r1, #0x7
 8000c58:      	orr.w	r1, r1, r3, lsr #6
 8000c5c:      	bic	r1, r1, #0xfefefefe
 8000c60:      	add	r0, r1
 8000c62:      	mvn.w	r1, r4
 8000c66:      	lsr.w	r1, r1, #0x7
 8000c6a:      	orr.w	r1, r1, r4, lsr #6
 8000c6e:      	bic	r1, r1, #0xfefefefe
 8000c72:      	add	r0, r1
 8000c74:      	mvn.w	r1, r9
 8000c78:      	lsr.w	r1, r1, #0x7
 8000c7c:      	orr.w	r1, r1, r9, lsr #6
 8000c80:      	bic	r1, r1, #0xfefefefe
 8000c84:      	add	r0, r1
 8000c86:      	mvn.w	r1, r12
 8000c8a:      	lsr.w	r1, r1, #0x7
 8000c8e:      	orr.w	r1, r1, r12, lsr #6
 8000c92:      	bic	r1, r1, #0xfefefefe
 8000c96:      	add.w	r12, r1, r0
 8000c9a:      	bne.w	0x8000b50 <<&T as core::fmt::Display>::fmt::h334ee89cbdea99d4+0x428> @ imm = #-0x14e
 8000c9e:      	ldr	r1, [sp, #0x10]
 8000ca0:      	ands	r0, r1, #0x3
 8000ca4:      	beq.w	0x8000ae4 <<&T as core::fmt::Display>::fmt::h334ee89cbdea99d4+0x3bc> @ imm = #-0x1c4
 8000ca8:      	ldm.w	r6, {r1, r2, r3, r4}
 8000cac:      	cmp	r0, #0x1
 8000cae:      	mvn.w	r5, r1
 8000cb2:      	lsr.w	r5, r5, #0x7
 8000cb6:      	orr.w	r1, r5, r1, lsr #6
 8000cba:      	mvn.w	r5, r2
 8000cbe:      	bic	r1, r1, #0xfefefefe
 8000cc2:      	lsr.w	r5, r5, #0x7
 8000cc6:      	orr.w	r2, r5, r2, lsr #6
 8000cca:      	add	r1, r12
 8000ccc:      	bic	r2, r2, #0xfefefefe
 8000cd0:      	add	r1, r2
 8000cd2:      	mvn.w	r2, r3
 8000cd6:      	lsr.w	r2, r2, #0x7
 8000cda:      	orr.w	r2, r2, r3, lsr #6
 8000cde:      	bic	r2, r2, #0xfefefefe
 8000ce2:      	add	r1, r2
 8000ce4:      	mvn.w	r2, r4
 8000ce8:      	lsr.w	r2, r2, #0x7
 8000cec:      	orr.w	r2, r2, r4, lsr #6
 8000cf0:      	bic	r2, r2, #0xfefefefe
 8000cf4:      	add.w	r12, r2, r1
 8000cf8:      	beq.w	0x8000ae4 <<&T as core::fmt::Display>::fmt::h334ee89cbdea99d4+0x3bc> @ imm = #-0x218
 8000cfc:      	add.w	r4, r6, #0x10
 8000d00:      	cmp	r0, #0x2
 8000d02:      	ldm	r4, {r1, r2, r3, r4}
 8000d04:      	mvn.w	r5, r1
 8000d08:      	lsr.w	r5, r5, #0x7
 8000d0c:      	orr.w	r1, r5, r1, lsr #6
 8000d10:      	mvn.w	r5, r2
 8000d14:      	bic	r1, r1, #0xfefefefe
 8000d18:      	lsr.w	r5, r5, #0x7
 8000d1c:      	orr.w	r2, r5, r2, lsr #6
 8000d20:      	add	r1, r12
 8000d22:      	bic	r2, r2, #0xfefefefe
 8000d26:      	add	r1, r2
 8000d28:      	mvn.w	r2, r3
 8000d2c:      	lsr.w	r2, r2, #0x7
 8000d30:      	orr.w	r2, r2, r3, lsr #6
 8000d34:      	bic	r2, r2, #0xfefefefe
 8000d38:      	add	r1, r2
 8000d3a:      	mvn.w	r2, r4
 8000d3e:      	lsr.w	r2, r2, #0x7
 8000d42:      	orr.w	r2, r2, r4, lsr #6
 8000d46:      	bic	r2, r2, #0xfefefefe
 8000d4a:      	add.w	r12, r2, r1
 8000d4e:      	beq.w	0x8000ae4 <<&T as core::fmt::Display>::fmt::h334ee89cbdea99d4+0x3bc> @ imm = #-0x26e
 8000d52:      	add.w	r3, r6, #0x20
 8000d56:      	ldm	r3, {r0, r1, r2, r3}
 8000d58:      	mvns	r6, r1
 8000d5a:      	lsrs	r6, r6, #0x7
 8000d5c:      	orr.w	r1, r6, r1, lsr #6
 8000d60:      	mvns	r4, r0
 8000d62:      	bic	r1, r1, #0xfefefefe
 8000d66:      	lsrs	r4, r4, #0x7
 8000d68:      	orr.w	r0, r4, r0, lsr #6
 8000d6c:      	bic	r0, r0, #0xfefefefe
 8000d70:      	add	r0, r12
 8000d72:      	add	r0, r1
 8000d74:      	mvns	r1, r2
 8000d76:      	lsrs	r1, r1, #0x7
 8000d78:      	orr.w	r1, r1, r2, lsr #6
 8000d7c:      	bic	r1, r1, #0xfefefefe
 8000d80:      	add	r0, r1
 8000d82:      	mvns	r1, r3
 8000d84:      	lsrs	r1, r1, #0x7
 8000d86:      	orr.w	r1, r1, r3, lsr #6
 8000d8a:      	bic	r1, r1, #0xfefefefe
 8000d8e:      	add.w	r12, r1, r0
 8000d92:      	b	0x8000ae4 <<&T as core::fmt::Display>::fmt::h334ee89cbdea99d4+0x3bc> @ imm = #-0x2b2
 8000d94:      	ldrd	r8, r10, [sp, #8]
 8000d98:      	ldrd	r4, r1, [sp]
 8000d9c:      	cmp	r4, lr
 8000d9e:      	bls	0x8000e22 <<&T as core::fmt::Display>::fmt::h334ee89cbdea99d4+0x6fa> @ imm = #0x80
 8000da0:      	ldrb.w	r2, [r1, #0x20]
 8000da4:      	sub.w	r9, r4, lr
 8000da8:      	movs	r0, #0x0
 8000daa:      	tbb	[pc, r2]

08000dae <$d.12>:
 8000dae: 4b 02 45 4b  	.word	0x4b45024b

08000db2 <$t.13>:
 8000db2:      	mov	r0, r9
 8000db4:      	mov.w	r9, #0x0
 8000db8:      	b	0x8000e44 <<&T as core::fmt::Display>::fmt::h334ee89cbdea99d4+0x71c> @ imm = #0x88
 8000dba:      	and	r3, r11, #0xfc
 8000dbe:      	ldr.w	r10, [sp, #0xc]
 8000dc2:      	ldr	r4, [sp]
 8000dc4:      	cmp	r0, #0x1
 8000dc6:      	ldr.w	r1, [r8, r3, lsl #2]
 8000dca:      	mvn.w	r2, r1
 8000dce:      	lsr.w	r2, r2, #0x7
 8000dd2:      	orr.w	r1, r2, r1, lsr #6
 8000dd6:      	bic	r2, r1, #0xfefefefe
 8000dda:      	beq	0x8000e08 <<&T as core::fmt::Display>::fmt::h334ee89cbdea99d4+0x6e0> @ imm = #0x2a
 8000ddc:      	add.w	r3, r8, r3, lsl #2
 8000de0:      	cmp	r0, #0x2
 8000de2:      	ldr	r1, [r3, #0x4]
 8000de4:      	mvn.w	r6, r1
 8000de8:      	lsr.w	r6, r6, #0x7
 8000dec:      	orr.w	r1, r6, r1, lsr #6
 8000df0:      	bic	r1, r1, #0xfefefefe
 8000df4:      	add	r2, r1
 8000df6:      	beq	0x8000e08 <<&T as core::fmt::Display>::fmt::h334ee89cbdea99d4+0x6e0> @ imm = #0xe
 8000df8:      	ldr	r0, [r3, #0x8]
 8000dfa:      	mvns	r1, r0
 8000dfc:      	lsrs	r1, r1, #0x7
 8000dfe:      	orr.w	r0, r1, r0, lsr #6
 8000e02:      	bic	r0, r0, #0xfefefefe
 8000e06:      	add	r2, r0
 8000e08:      	uxtb16	r0, r2
 8000e0c:      	uxtb16	r1, r2, ror #8
 8000e10:      	add	r0, r1
 8000e12:      	ldrd	r1, r8, [sp, #4]
 8000e16:      	add.w	r0, r0, r0, lsl #16
 8000e1a:      	add.w	lr, lr, r0, lsr #16
 8000e1e:      	cmp	r4, lr
 8000e20:      	bhi	0x8000da0 <<&T as core::fmt::Display>::fmt::h334ee89cbdea99d4+0x678> @ imm = #-0x84
 8000e22:      	ldrd	r0, r1, [r1, #20]
 8000e26:      	mov	r2, r8
 8000e28:      	ldr	r3, [r1, #0xc]
 8000e2a:      	mov	r1, r10
 8000e2c:      	add	sp, #0x14
 8000e2e:      	pop.w	{r8, r9, r10, r11}
 8000e32:      	pop.w	{r4, r5, r6, r7, lr}
 8000e36:      	bx	r3
 8000e38:      	add.w	r2, r9, #0x1
 8000e3c:      	lsr.w	r0, r9, #0x1
 8000e40:      	lsr.w	r9, r2, #0x1
 8000e44:      	ldrd	r11, r4, [r1, #16]
 8000e48:      	adds	r6, r0, #0x1
 8000e4a:      	ldr	r5, [r1, #0x18]
 8000e4c:      	subs	r6, #0x1
 8000e4e:      	beq	0x8000e5e <<&T as core::fmt::Display>::fmt::h334ee89cbdea99d4+0x736> @ imm = #0xc
 8000e50:      	ldr	r2, [r5, #0x10]
 8000e52:      	mov	r0, r4
 8000e54:      	mov	r1, r11
 8000e56:      	blx	r2
 8000e58:      	cmp	r0, #0x0
 8000e5a:      	beq	0x8000e4c <<&T as core::fmt::Display>::fmt::h334ee89cbdea99d4+0x724> @ imm = #-0x12
 8000e5c:      	b	0x8000e6a <<&T as core::fmt::Display>::fmt::h334ee89cbdea99d4+0x742> @ imm = #0xa
 8000e5e:      	ldr	r3, [r5, #0xc]
 8000e60:      	mov	r0, r4
 8000e62:      	mov	r1, r10
 8000e64:      	mov	r2, r8
 8000e66:      	blx	r3
 8000e68:      	cbz	r0, 0x8000e74 <<&T as core::fmt::Display>::fmt::h334ee89cbdea99d4+0x74c> @ imm = #0x8
 8000e6a:      	movs	r0, #0x1
 8000e6c:      	add	sp, #0x14
 8000e6e:      	pop.w	{r8, r9, r10, r11}
 8000e72:      	pop	{r4, r5, r6, r7, pc}
 8000e74:      	movs	r6, #0x0
 8000e76:      	cmp	r9, r6
 8000e78:      	beq	0x8000e8c <<&T as core::fmt::Display>::fmt::h334ee89cbdea99d4+0x764> @ imm = #0x10
 8000e7a:      	ldr	r2, [r5, #0x10]
 8000e7c:      	mov	r0, r4
 8000e7e:      	mov	r1, r11
 8000e80:      	blx	r2
 8000e82:      	adds	r6, #0x1
 8000e84:      	cmp	r0, #0x0
 8000e86:      	beq	0x8000e76 <<&T as core::fmt::Display>::fmt::h334ee89cbdea99d4+0x74e> @ imm = #-0x14
 8000e88:      	subs	r1, r6, #0x1
 8000e8a:      	b	0x8000e8e <<&T as core::fmt::Display>::fmt::h334ee89cbdea99d4+0x766> @ imm = #0x0
 8000e8c:      	mov	r1, r9
 8000e8e:      	movs	r0, #0x0
 8000e90:      	cmp	r1, r9
 8000e92:      	it	lo
 8000e94:      	movlo	r0, #0x1
 8000e96:      	add	sp, #0x14
 8000e98:      	pop.w	{r8, r9, r10, r11}
 8000e9c:      	pop	{r4, r5, r6, r7, pc}

08000e9e <core::fmt::write::h577537c504fd887c>:
 8000e9e:      	push	{r4, r5, r6, r7, lr}
 8000ea0:      	add	r7, sp, #0xc
 8000ea2:      	push.w	{r8, r9, r10, r11}
 8000ea6:      	sub	sp, #0x34
 8000ea8:      	movs	r3, #0x3
 8000eaa:      	ldr	r6, [r2, #0x10]
 8000eac:      	strb.w	r3, [sp, #0x30]
 8000eb0:      	movs	r3, #0x20
 8000eb2:      	str	r3, [sp, #0x20]
 8000eb4:      	movs	r3, #0x0
 8000eb6:      	cmp	r6, #0x0
 8000eb8:      	strd	r1, r3, [sp, #40]
 8000ebc:      	str	r0, [sp, #0x24]
 8000ebe:      	str	r3, [sp, #0x18]
 8000ec0:      	str	r3, [sp, #0x10]
 8000ec2:      	beq	0x8000fae <core::fmt::write::h577537c504fd887c+0x110> @ imm = #0xe8
 8000ec4:      	ldr	r0, [r2, #0x14]
 8000ec6:      	cmp	r0, #0x0
 8000ec8:      	beq.w	0x8001006 <core::fmt::write::h577537c504fd887c+0x168> @ imm = #0x13a
 8000ecc:      	ldr	r1, [r2]
 8000ece:      	mov.w	r8, #0x0
 8000ed2:      	ldr.w	r11, [r2, #0x8]
 8000ed6:      	mov.w	r9, #0x0
 8000eda:      	str	r1, [sp, #0xc]
 8000edc:      	lsls	r1, r0, #0x5
 8000ede:      	subs	r0, #0x1
 8000ee0:      	mov.w	r10, #0x0
 8000ee4:      	bic	r0, r0, #0xf8000000
 8000ee8:      	str	r2, [sp, #0x4]
 8000eea:      	adds	r0, #0x1
 8000eec:      	str	r1, [sp, #0x8]
 8000eee:      	str	r0, [sp]
 8000ef0:      	ldr	r0, [sp, #0xc]
 8000ef2:      	add	r0, r9
 8000ef4:      	ldr	r2, [r0, #0x4]
 8000ef6:      	cbz	r2, 0x8000f0c <core::fmt::write::h577537c504fd887c+0x6e> @ imm = #0x12
 8000ef8:      	ldr	r1, [sp, #0xc]
 8000efa:      	ldrd	r0, r3, [sp, #36]
 8000efe:      	ldr	r3, [r3, #0xc]
 8000f00:      	ldr.w	r1, [r1, r9]
 8000f04:      	blx	r3
 8000f06:      	cmp	r0, #0x0
 8000f08:      	bne.w	0x8001028 <core::fmt::write::h577537c504fd887c+0x18a> @ imm = #0x11c
 8000f0c:      	add.w	r0, r6, r8
 8000f10:      	ldr	r3, [r0, #0x10]
 8000f12:      	add.w	r0, r6, r9, lsl #2
 8000f16:      	ldrd	r2, r1, [r0, #8]
 8000f1a:      	ldrb	r5, [r0, #0x1c]
 8000f1c:      	ldr	r4, [r0, #0x18]
 8000f1e:      	str	r3, [sp, #0x20]
 8000f20:      	strb.w	r5, [sp, #0x30]
 8000f24:      	str	r4, [sp, #0x2c]
 8000f26:      	cbz	r2, 0x8000f48 <core::fmt::write::h577537c504fd887c+0xaa> @ imm = #0x1e
 8000f28:      	cmp	r2, #0x1
 8000f2a:      	bne	0x8000f3e <core::fmt::write::h577537c504fd887c+0xa0> @ imm = #0x10
 8000f2c:      	add.w	r2, r11, r1, lsl #3
 8000f30:      	movw	r3, #0x3d9
 8000f34:      	movt	r3, #0x800
 8000f38:      	ldr	r2, [r2, #0x4]
 8000f3a:      	cmp	r2, r3
 8000f3c:      	beq	0x8000f42 <core::fmt::write::h577537c504fd887c+0xa4> @ imm = #0x2
 8000f3e:      	movs	r2, #0x0
 8000f40:      	b	0x8000f4a <core::fmt::write::h577537c504fd887c+0xac> @ imm = #0x6
 8000f42:      	ldr.w	r1, [r11, r1, lsl #3]
 8000f46:      	ldr	r1, [r1]
 8000f48:      	movs	r2, #0x1
 8000f4a:      	ldr.w	r3, [r6, r8]
 8000f4e:      	strd	r2, r1, [sp, #16]
 8000f52:      	ldr	r1, [r0, #0x4]
 8000f54:      	cbz	r3, 0x8000f76 <core::fmt::write::h577537c504fd887c+0xd8> @ imm = #0x1e
 8000f56:      	cmp	r3, #0x1
 8000f58:      	bne	0x8000f6c <core::fmt::write::h577537c504fd887c+0xce> @ imm = #0x10
 8000f5a:      	add.w	r2, r11, r1, lsl #3
 8000f5e:      	movw	r3, #0x3d9
 8000f62:      	movt	r3, #0x800
 8000f66:      	ldr	r2, [r2, #0x4]
 8000f68:      	cmp	r2, r3
 8000f6a:      	beq	0x8000f70 <core::fmt::write::h577537c504fd887c+0xd2> @ imm = #0x2
 8000f6c:      	movs	r2, #0x0
 8000f6e:      	b	0x8000f78 <core::fmt::write::h577537c504fd887c+0xda> @ imm = #0x6
 8000f70:      	ldr.w	r1, [r11, r1, lsl #3]
 8000f74:      	ldr	r1, [r1]
 8000f76:      	movs	r2, #0x1
 8000f78:      	ldr	r3, [r0, #0x14]
 8000f7a:      	str	r1, [sp, #0x1c]
 8000f7c:      	add.w	r1, r11, r3, lsl #3
 8000f80:      	ldr.w	r0, [r11, r3, lsl #3]
 8000f84:      	ldr	r3, [r1, #0x4]
 8000f86:      	add	r1, sp, #0x10
 8000f88:      	str	r2, [sp, #0x18]
 8000f8a:      	blx	r3
 8000f8c:      	cmp	r0, #0x0
 8000f8e:      	bne	0x8001028 <core::fmt::write::h577537c504fd887c+0x18a> @ imm = #0x96
 8000f90:      	ldr	r0, [sp, #0x8]
 8000f92:      	add.w	r8, r8, #0x20
 8000f96:      	add.w	r10, r10, #0x1
 8000f9a:      	add.w	r9, r9, #0x8
 8000f9e:      	cmp	r0, r8
 8000fa0:      	bne	0x8000ef0 <core::fmt::write::h577537c504fd887c+0x52> @ imm = #-0xb4
 8000fa2:      	ldrd	r11, r2, [sp]
 8000fa6:      	ldr	r0, [r2, #0x4]
 8000fa8:      	cmp	r11, r0
 8000faa:      	blo	0x8001010 <core::fmt::write::h577537c504fd887c+0x172> @ imm = #0x62
 8000fac:      	b	0x8001032 <core::fmt::write::h577537c504fd887c+0x194> @ imm = #0x82
 8000fae:      	ldr	r0, [r2, #0xc]
 8000fb0:      	cbz	r0, 0x8001006 <core::fmt::write::h577537c504fd887c+0x168> @ imm = #0x52
 8000fb2:      	ldr.w	r10, [r2, #0x8]
 8000fb6:      	add.w	r8, sp, #0x10
 8000fba:      	ldr	r5, [r2]
 8000fbc:      	movs	r6, #0x0
 8000fbe:      	add.w	r9, r10, r0, lsl #3
 8000fc2:      	subs	r0, #0x1
 8000fc4:      	bic	r0, r0, #0xe0000000
 8000fc8:      	str	r2, [sp, #0x4]
 8000fca:      	add.w	r11, r0, #0x1
 8000fce:      	add.w	r0, r5, r6, lsl #3
 8000fd2:      	ldr	r2, [r0, #0x4]
 8000fd4:      	cbz	r2, 0x8000fe4 <core::fmt::write::h577537c504fd887c+0x146> @ imm = #0xc
 8000fd6:      	ldrd	r0, r3, [sp, #36]
 8000fda:      	ldr.w	r1, [r5, r6, lsl #3]
 8000fde:      	ldr	r3, [r3, #0xc]
 8000fe0:      	blx	r3
 8000fe2:      	cbnz	r0, 0x8001028 <core::fmt::write::h577537c504fd887c+0x18a> @ imm = #0x42
 8000fe4:      	add.w	r4, r10, r6, lsl #3
 8000fe8:      	mov	r1, r8
 8000fea:      	ldrd	r0, r2, [r4]
 8000fee:      	blx	r2
 8000ff0:      	cbnz	r0, 0x8001028 <core::fmt::write::h577537c504fd887c+0x18a> @ imm = #0x34
 8000ff2:      	add.w	r0, r4, #0x8
 8000ff6:      	adds	r6, #0x1
 8000ff8:      	cmp	r0, r9
 8000ffa:      	bne	0x8000fce <core::fmt::write::h577537c504fd887c+0x130> @ imm = #-0x30
 8000ffc:      	ldr	r2, [sp, #0x4]
 8000ffe:      	ldr	r0, [r2, #0x4]
 8001000:      	cmp	r11, r0
 8001002:      	blo	0x8001010 <core::fmt::write::h577537c504fd887c+0x172> @ imm = #0xa
 8001004:      	b	0x8001032 <core::fmt::write::h577537c504fd887c+0x194> @ imm = #0x2a
 8001006:      	mov.w	r11, #0x0
 800100a:      	ldr	r0, [r2, #0x4]
 800100c:      	cmp	r11, r0
 800100e:      	bhs	0x8001032 <core::fmt::write::h577537c504fd887c+0x194> @ imm = #0x20
 8001010:      	ldr	r2, [r2]
 8001012:      	mov	r6, r11
 8001014:      	ldrd	r0, r1, [sp, #36]
 8001018:      	ldr	r3, [r1, #0xc]
 800101a:      	ldr.w	r1, [r2, r11, lsl #3]
 800101e:      	add.w	r2, r2, r11, lsl #3
 8001022:      	ldr	r2, [r2, #0x4]
 8001024:      	blx	r3
 8001026:      	cbz	r0, 0x8001032 <core::fmt::write::h577537c504fd887c+0x194> @ imm = #0x8
 8001028:      	movs	r0, #0x1
 800102a:      	add	sp, #0x34
 800102c:      	pop.w	{r8, r9, r10, r11}
 8001030:      	pop	{r4, r5, r6, r7, pc}
 8001032:      	movs	r0, #0x0
 8001034:      	add	sp, #0x34
 8001036:      	pop.w	{r8, r9, r10, r11}
 800103a:      	pop	{r4, r5, r6, r7, pc}

0800103c <cortex_m::itm::write_all::h58ced4094f74b7c6>:
; pub fn write_all(port: &mut Stim, buffer: &[u8]) {
 800103c:      	push	{r4, r5, r7, lr}
 800103e:      	add	r7, sp, #0x8
;         if len == 0 {
 8001040:      	cmp	r2, #0x0
 8001042:      	beq.w	0x8001146 <cortex_m::itm::write_all::h58ced4094f74b7c6+0x10a> @ imm = #0x100
;         if ptr as usize % 2 == 1 {
 8001046:      	lsls	r3, r1, #0x1f
 8001048:      	beq	0x800106c <cortex_m::itm::write_all::h58ced4094f74b7c6+0x30> @ imm = #0x20
 800104a:      	ldr	r3, [r0]
;             while !port.is_fifo_ready() {}
 800104c:      	lsls	r3, r3, #0x1f
 800104e:      	bne	0x8001064 <cortex_m::itm::write_all::h58ced4094f74b7c6+0x28> @ imm = #0x12
 8001050:      	ldr	r3, [r0]
;             while !port.is_fifo_ready() {}
 8001052:      	lsls	r3, r3, #0x1f
 8001054:      	itt	eq
 8001056:      	ldreq	r3, [r0]
;             while !port.is_fifo_ready() {}
 8001058:      	lslseq.w	r3, r3, #0x1f
 800105c:      	bne	0x8001064 <cortex_m::itm::write_all::h58ced4094f74b7c6+0x28> @ imm = #0x4
 800105e:      	ldr	r3, [r0]
;             while !port.is_fifo_ready() {}
 8001060:      	lsls	r3, r3, #0x1f
 8001062:      	beq	0x800104a <cortex_m::itm::write_all::h58ced4094f74b7c6+0xe> @ imm = #-0x1c
;             port.write_u8(*ptr);
 8001064:      	ldrb	r3, [r1], #1
;             len -= 1;
 8001068:      	subs	r2, #0x1
 800106a:      	strb	r3, [r0]
;         if ptr as usize % 4 == 2 {
 800106c:      	and	r3, r1, #0x3
 8001070:      	cmp	r3, #0x2
 8001072:      	bne	0x800109a <cortex_m::itm::write_all::h58ced4094f74b7c6+0x5e> @ imm = #0x24
;             if len > 1 {
 8001074:      	cmp	r2, #0x2
 8001076:      	blo	0x8001124 <cortex_m::itm::write_all::h58ced4094f74b7c6+0xe8> @ imm = #0xaa
 8001078:      	ldr	r3, [r0]
;                 while !port.is_fifo_ready() {}
 800107a:      	lsls	r3, r3, #0x1f
 800107c:      	bne	0x8001092 <cortex_m::itm::write_all::h58ced4094f74b7c6+0x56> @ imm = #0x12
 800107e:      	ldr	r3, [r0]
;                 while !port.is_fifo_ready() {}
 8001080:      	lsls	r3, r3, #0x1f
 8001082:      	itt	eq
 8001084:      	ldreq	r3, [r0]
;                 while !port.is_fifo_ready() {}
 8001086:      	lslseq.w	r3, r3, #0x1f
 800108a:      	bne	0x8001092 <cortex_m::itm::write_all::h58ced4094f74b7c6+0x56> @ imm = #0x4
 800108c:      	ldr	r3, [r0]
;                 while !port.is_fifo_ready() {}
 800108e:      	lsls	r3, r3, #0x1f
 8001090:      	beq	0x8001078 <cortex_m::itm::write_all::h58ced4094f74b7c6+0x3c> @ imm = #-0x1c
 8001092:      	ldrh	r3, [r1], #2
;                 len -= 2;
 8001096:      	subs	r2, #0x2
 8001098:      	strh	r3, [r0]
;     if len == 0 {
 800109a:      	cmp	r2, #0x0
 800109c:      	beq	0x8001146 <cortex_m::itm::write_all::h58ced4094f74b7c6+0x10a> @ imm = #0xa6
;     let split = len & !0b11;
 800109e:      	bic	r12, r2, #0x3
;         slice::from_raw_parts(buffer.as_ptr() as *const u32, split >> 2),
 80010a2:      	lsrs.w	lr, r2, #0x2
 80010a6:      	beq	0x80010d6 <cortex_m::itm::write_all::h58ced4094f74b7c6+0x9a> @ imm = #0x2c
 80010a8:      	movs	r3, #0x0
 80010aa:      	mov	r4, r1
 80010ac:      	b	0x80010ba <cortex_m::itm::write_all::h58ced4094f74b7c6+0x7e> @ imm = #0xa
 80010ae:      	ldr	r5, [r4], #4
 80010b2:      	adds	r3, #0x1
 80010b4:      	cmp	r3, lr
 80010b6:      	str	r5, [r0]
 80010b8:      	beq	0x80010d6 <cortex_m::itm::write_all::h58ced4094f74b7c6+0x9a> @ imm = #0x1a
 80010ba:      	ldr	r5, [r0]
;         while !stim.is_fifo_ready() {}
 80010bc:      	lsls	r5, r5, #0x1f
 80010be:      	bne	0x80010ae <cortex_m::itm::write_all::h58ced4094f74b7c6+0x72> @ imm = #-0x14
 80010c0:      	ldr	r5, [r0]
;         while !stim.is_fifo_ready() {}
 80010c2:      	lsls	r5, r5, #0x1f
 80010c4:      	itt	eq
 80010c6:      	ldreq	r5, [r0]
;         while !stim.is_fifo_ready() {}
 80010c8:      	lslseq.w	r5, r5, #0x1f
 80010cc:      	bne	0x80010ae <cortex_m::itm::write_all::h58ced4094f74b7c6+0x72> @ imm = #-0x22
 80010ce:      	ldr	r5, [r0]
;         while !stim.is_fifo_ready() {}
 80010d0:      	lsls	r5, r5, #0x1f
 80010d2:      	beq	0x80010ba <cortex_m::itm::write_all::h58ced4094f74b7c6+0x7e> @ imm = #-0x1c
 80010d4:      	b	0x80010ae <cortex_m::itm::write_all::h58ced4094f74b7c6+0x72> @ imm = #-0x2a
;     let mut left = len & 0b11;
 80010d6:      	and	r2, r2, #0x3
 80010da:      	add	r1, r12
;     if left > 1 {
 80010dc:      	cmp	r2, #0x2
 80010de:      	blo	0x8001102 <cortex_m::itm::write_all::h58ced4094f74b7c6+0xc6> @ imm = #0x20
 80010e0:      	ldr	r3, [r0]
;         while !port.is_fifo_ready() {}
 80010e2:      	lsls	r3, r3, #0x1f
 80010e4:      	bne	0x80010fa <cortex_m::itm::write_all::h58ced4094f74b7c6+0xbe> @ imm = #0x12
 80010e6:      	ldr	r3, [r0]
;         while !port.is_fifo_ready() {}
 80010e8:      	lsls	r3, r3, #0x1f
 80010ea:      	itt	eq
 80010ec:      	ldreq	r3, [r0]
;         while !port.is_fifo_ready() {}
 80010ee:      	lslseq.w	r3, r3, #0x1f
 80010f2:      	bne	0x80010fa <cortex_m::itm::write_all::h58ced4094f74b7c6+0xbe> @ imm = #0x4
 80010f4:      	ldr	r3, [r0]
;         while !port.is_fifo_ready() {}
 80010f6:      	lsls	r3, r3, #0x1f
 80010f8:      	beq	0x80010e0 <cortex_m::itm::write_all::h58ced4094f74b7c6+0xa4> @ imm = #-0x1c
 80010fa:      	ldrh	r3, [r1], #2
;         left -= 2;
 80010fe:      	subs	r2, #0x2
 8001100:      	strh	r3, [r0]
;     if left == 1 {
 8001102:      	cmp	r2, #0x1
; }
 8001104:      	it	ne
 8001106:      	popne	{r4, r5, r7, pc}
 8001108:      	ldr	r2, [r0]
;         while !port.is_fifo_ready() {}
 800110a:      	lsls	r2, r2, #0x1f
 800110c:      	bne	0x8001142 <cortex_m::itm::write_all::h58ced4094f74b7c6+0x106> @ imm = #0x32
 800110e:      	ldr	r2, [r0]
;         while !port.is_fifo_ready() {}
 8001110:      	lsls	r2, r2, #0x1f
 8001112:      	itt	eq
 8001114:      	ldreq	r2, [r0]
;         while !port.is_fifo_ready() {}
 8001116:      	lslseq.w	r2, r2, #0x1f
 800111a:      	bne	0x8001142 <cortex_m::itm::write_all::h58ced4094f74b7c6+0x106> @ imm = #0x24
 800111c:      	ldr	r2, [r0]
;         while !port.is_fifo_ready() {}
 800111e:      	lsls	r2, r2, #0x1f
 8001120:      	beq	0x8001108 <cortex_m::itm::write_all::h58ced4094f74b7c6+0xcc> @ imm = #-0x1c
 8001122:      	b	0x8001142 <cortex_m::itm::write_all::h58ced4094f74b7c6+0x106> @ imm = #0x1c
;                 if len == 1 {
 8001124:      	cmp	r2, #0x1
 8001126:      	bne	0x8001146 <cortex_m::itm::write_all::h58ced4094f74b7c6+0x10a> @ imm = #0x1c
 8001128:      	ldr	r2, [r0]
;                     while !port.is_fifo_ready() {}
 800112a:      	lsls	r2, r2, #0x1f
 800112c:      	bne	0x8001142 <cortex_m::itm::write_all::h58ced4094f74b7c6+0x106> @ imm = #0x12
 800112e:      	ldr	r2, [r0]
;                     while !port.is_fifo_ready() {}
 8001130:      	lsls	r2, r2, #0x1f
 8001132:      	itt	eq
 8001134:      	ldreq	r2, [r0]
;                     while !port.is_fifo_ready() {}
 8001136:      	lslseq.w	r2, r2, #0x1f
 800113a:      	bne	0x8001142 <cortex_m::itm::write_all::h58ced4094f74b7c6+0x106> @ imm = #0x4
 800113c:      	ldr	r2, [r0]
;                     while !port.is_fifo_ready() {}
 800113e:      	lsls	r2, r2, #0x1f
 8001140:      	beq	0x8001128 <cortex_m::itm::write_all::h58ced4094f74b7c6+0xec> @ imm = #-0x1c
 8001142:      	ldrb	r1, [r1]
 8001144:      	strb	r1, [r0]
; }
 8001146:      	pop	{r4, r5, r7, pc}

08001148 <ResetTrampoline>:
;             fn trampoline() -> ! {
 8001148:      	push	{r7, lr}
 800114a:      	mov	r7, sp
;                 unsafe { main() }
 800114c:      	bl	0x8000218 <main>        @ imm = #-0xf38

08001150 <WWDG>:
;     loop {
 8001150:      	b	0x8001150 <WWDG>        @ imm = #-0x4

08001152 <__pre_init>:
; pub unsafe extern "C" fn DefaultPreInit() {}
 8001152:      	bx	lr

08001154 <rust_begin_unwind>:
; fn panic(info: &PanicInfo) -> ! {
 8001154:      	push	{r7, lr}
 8001156:      	mov	r7, sp
 8001158:      	sub	sp, #0x28
 800115a:      	str	r0, [sp]
;     call_asm!(__cpsid());
 800115c:      	bl	0x8001350 <__cpsid>     @ imm = #0x1f0
 8001160:      	movs	r0, #0x0
 8001162:      	movw	r1, #0x16d8
 8001166:      	str	r0, [sp, #0x14]
 8001168:      	movs	r0, #0x2
 800116a:      	str	r0, [sp, #0x8]
 800116c:      	movw	r0, #0x16f4
 8001170:      	movt	r0, #0x800
 8001174:      	add	r2, sp, #0x4
 8001176:      	str	r0, [sp, #0x4]
 8001178:      	movs	r0, #0x1
 800117a:      	str	r0, [sp, #0x10]
 800117c:      	add	r0, sp, #0x1c
 800117e:      	str	r0, [sp, #0xc]
;     iprintln!(stim, "{}", info);
 8001180:      	movw	r0, #0x11a1
 8001184:      	movt	r0, #0x800
 8001188:      	movt	r1, #0x800
;     iprintln!(stim, "{}", info);
 800118c:      	str	r0, [sp, #0x20]
 800118e:      	mov	r0, sp
 8001190:      	str	r0, [sp, #0x1c]
 8001192:      	mov.w	r0, #0xe0000000
;     Port(port).write_fmt(args).ok();
 8001196:      	str	r0, [sp, #0x24]
 8001198:      	add	r0, sp, #0x24
 800119a:      	bl	0x8000e9e <core::fmt::write::h577537c504fd887c> @ imm = #-0x300
;     loop {
 800119e:      	b	0x800119e <rust_begin_unwind+0x4a> @ imm = #-0x4

080011a0 <<&T as core::fmt::Display>::fmt::h9d8593f0dab326ef>:
 80011a0:      	push	{r4, r5, r6, r7, lr}
 80011a2:      	add	r7, sp, #0xc
 80011a4:      	push.w	{r8, r9, r10, r11}
 80011a8:      	sub	sp, #0x34
 80011aa:      	ldrd	r11, r8, [r1, #20]
 80011ae:      	movw	r1, #0x15f0
 80011b2:      	ldr.w	r9, [r8, #0xc]
 80011b6:      	movt	r1, #0x800
 80011ba:      	ldr	r6, [r0]
 80011bc:      	movs	r2, #0xc
 80011be:      	mov	r0, r11
 80011c0:      	blx	r9
 80011c2:      	cmp	r0, #0x0
 80011c4:      	bne	0x8001298 <<&T as core::fmt::Display>::fmt::h9d8593f0dab326ef+0xf8> @ imm = #0xd0
 80011c6:      	movw	r2, #0x15d8
 80011ca:      	movs	r1, #0x0
 80011cc:      	ldr	r0, [r6, #0xc]
 80011ce:      	movt	r2, #0x800
 80011d2:      	str	r1, [sp, #0x14]
 80011d4:      	movs	r1, #0x3
 80011d6:      	str	r2, [sp, #0x4]
 80011d8:      	add.w	r2, r0, #0xc
 80011dc:      	str	r1, [sp, #0x8]
 80011de:      	add	r4, sp, #0x1c
 80011e0:      	str	r1, [sp, #0x10]
 80011e2:      	movw	r1, #0x435
 80011e6:      	movt	r1, #0x800
 80011ea:      	str	r4, [sp, #0xc]
 80011ec:      	strd	r1, r2, [sp, #40]
 80011f0:      	add	r2, sp, #0x4
 80011f2:      	str	r1, [sp, #0x30]
 80011f4:      	add.w	r1, r0, #0x8
 80011f8:      	str	r1, [sp, #0x24]
 80011fa:      	movw	r1, #0x729
 80011fe:      	movt	r1, #0x800
 8001202:      	strd	r0, r1, [sp, #28]
 8001206:      	mov	r0, r11
 8001208:      	mov	r1, r8
 800120a:      	bl	0x8000e9e <core::fmt::write::h577537c504fd887c> @ imm = #-0x370
 800120e:      	cmp	r0, #0x0
 8001210:      	bne	0x8001298 <<&T as core::fmt::Display>::fmt::h9d8593f0dab326ef+0xf8> @ imm = #0x84
 8001212:      	ldr.w	r10, [r6, #0x8]
 8001216:      	cmp.w	r10, #0x0
 800121a:      	beq	0x8001244 <<&T as core::fmt::Display>::fmt::h9d8593f0dab326ef+0xa4> @ imm = #0x26
 800121c:      	movw	r1, #0x15fc
 8001220:      	mov	r0, r11
 8001222:      	movt	r1, #0x800
 8001226:      	movs	r2, #0x2
 8001228:      	blx	r9
 800122a:      	cbnz	r0, 0x8001298 <<&T as core::fmt::Display>::fmt::h9d8593f0dab326ef+0xf8> @ imm = #0x6a
 800122c:      	mov	r0, r4
 800122e:      	mov	r2, r4
 8001230:      	ldm.w	r10, {r1, r3, r4, r5, r6, r12}
 8001234:      	stm.w	r0, {r1, r3, r4, r5, r6, r12}
 8001238:      	mov	r0, r11
 800123a:      	mov	r1, r8
 800123c:      	bl	0x8000e9e <core::fmt::write::h577537c504fd887c> @ imm = #-0x3a2
 8001240:      	cbnz	r0, 0x8001298 <<&T as core::fmt::Display>::fmt::h9d8593f0dab326ef+0xf8> @ imm = #0x54
 8001242:      	b	0x80012a2 <<&T as core::fmt::Display>::fmt::h9d8593f0dab326ef+0x102> @ imm = #0x5c
 8001244:      	ldrd	r5, r0, [r6]
 8001248:      	ldr	r1, [r0, #0xc]
 800124a:      	mov	r0, r5
 800124c:      	blx	r1
 800124e:      	movw	r6, #0x1681
 8001252:      	movt	r6, #0xfdbc
 8001256:      	eors	r3, r6
 8001258:      	movw	r6, #0xc89c
 800125c:      	movt	r6, #0xc1a2
 8001260:      	eors	r1, r6
 8001262:      	orrs	r1, r3
 8001264:      	movw	r3, #0xef64
 8001268:      	movt	r3, #0xb1
 800126c:      	eors	r2, r3
 800126e:      	movw	r3, #0x7bc1
 8001272:      	movt	r3, #0xcd1e
 8001276:      	eors	r0, r3
 8001278:      	orrs	r0, r2
 800127a:      	orrs	r0, r1
 800127c:      	bne	0x80012a2 <<&T as core::fmt::Display>::fmt::h9d8593f0dab326ef+0x102> @ imm = #0x22
 800127e:      	movw	r1, #0x15fc
 8001282:      	mov	r0, r11
 8001284:      	movt	r1, #0x800
 8001288:      	movs	r2, #0x2
 800128a:      	blx	r9
 800128c:      	cbnz	r0, 0x8001298 <<&T as core::fmt::Display>::fmt::h9d8593f0dab326ef+0xf8> @ imm = #0x8
 800128e:      	ldrd	r1, r2, [r5]
 8001292:      	mov	r0, r11
 8001294:      	blx	r9
 8001296:      	cbz	r0, 0x80012a2 <<&T as core::fmt::Display>::fmt::h9d8593f0dab326ef+0x102> @ imm = #0x8
 8001298:      	movs	r0, #0x1
 800129a:      	add	sp, #0x34
 800129c:      	pop.w	{r8, r9, r10, r11}
 80012a0:      	pop	{r4, r5, r6, r7, pc}
 80012a2:      	movs	r0, #0x0
 80012a4:      	add	sp, #0x34
 80012a6:      	pop.w	{r8, r9, r10, r11}
 80012aa:      	pop	{r4, r5, r6, r7, pc}

080012ac <core::ptr::drop_in_place<cortex_m::itm::Port>::h4a3a38fbdc372bdf>:
 80012ac:      	bx	lr

080012ae <<cortex_m::itm::Port as core::fmt::Write>::write_str::h618a4008b1504ce2>:
;     fn write_str(&mut self, s: &str) -> fmt::Result {
 80012ae:      	push	{r7, lr}
 80012b0:      	mov	r7, sp
;         write_all(self.0, s.as_bytes());
 80012b2:      	ldr	r0, [r0]
 80012b4:      	bl	0x800103c <cortex_m::itm::write_all::h58ced4094f74b7c6> @ imm = #-0x27c
;     }
 80012b8:      	movs	r0, #0x0
 80012ba:      	pop	{r7, pc}

080012bc <core::fmt::Write::write_char::hc1736ba46a3da242>:
 80012bc:      	push	{r7, lr}
 80012be:      	mov	r7, sp
 80012c0:      	sub	sp, #0x8
 80012c2:      	movs	r2, #0x0
 80012c4:      	cmp	r1, #0x80
 80012c6:      	str	r2, [sp, #0x4]
 80012c8:      	bhs	0x80012d2 <core::fmt::Write::write_char::hc1736ba46a3da242+0x16> @ imm = #0x6
 80012ca:      	strb.w	r1, [sp, #0x4]
 80012ce:      	movs	r2, #0x1
 80012d0:      	b	0x8001334 <core::fmt::Write::write_char::hc1736ba46a3da242+0x78> @ imm = #0x60
 80012d2:      	movs	r2, #0x2
 80012d4:      	mov	r3, r1
 80012d6:      	bfi	r3, r2, #6, #26
 80012da:      	cmp.w	r1, #0x800
 80012de:      	bhs	0x80012ec <core::fmt::Write::write_char::hc1736ba46a3da242+0x30> @ imm = #0xa
 80012e0:      	strb.w	r3, [sp, #0x5]
 80012e4:      	movs	r3, #0xc0
 80012e6:      	orr.w	r1, r3, r1, lsr #6
 80012ea:      	b	0x8001330 <core::fmt::Write::write_char::hc1736ba46a3da242+0x74> @ imm = #0x42
 80012ec:      	cmp.w	r1, #0x10000
 80012f0:      	bhs	0x800130e <core::fmt::Write::write_char::hc1736ba46a3da242+0x52> @ imm = #0x1a
 80012f2:      	strb.w	r3, [sp, #0x6]
 80012f6:      	lsrs	r3, r1, #0x6
 80012f8:      	bfi	r3, r2, #6, #26
 80012fc:      	movs	r2, #0xe0
 80012fe:      	orr.w	r1, r2, r1, lsr #12
 8001302:      	strb.w	r3, [sp, #0x5]
 8001306:      	strb.w	r1, [sp, #0x4]
 800130a:      	movs	r2, #0x3
 800130c:      	b	0x8001334 <core::fmt::Write::write_char::hc1736ba46a3da242+0x78> @ imm = #0x24
 800130e:      	strb.w	r3, [sp, #0x7]
 8001312:      	lsrs	r3, r1, #0x6
 8001314:      	bfi	r3, r2, #6, #26
 8001318:      	strb.w	r3, [sp, #0x6]
 800131c:      	lsrs	r3, r1, #0xc
 800131e:      	lsrs	r1, r1, #0x12
 8001320:      	bfi	r3, r2, #6, #26
 8001324:      	movs	r2, #0x1e
 8001326:      	bfi	r1, r2, #3, #29
 800132a:      	movs	r2, #0x4
 800132c:      	strb.w	r3, [sp, #0x5]
 8001330:      	strb.w	r1, [sp, #0x4]
;         write_all(self.0, s.as_bytes());
 8001334:      	ldr	r0, [r0]
 8001336:      	add	r1, sp, #0x4
;         write_all(self.0, s.as_bytes());
 8001338:      	bl	0x800103c <cortex_m::itm::write_all::h58ced4094f74b7c6> @ imm = #-0x300
 800133c:      	movs	r0, #0x0
 800133e:      	add	sp, #0x8
 8001340:      	pop	{r7, pc}

08001342 <core::fmt::Write::write_fmt::ha3d7a3cc7e579e5e>:
 8001342:      	mov	r2, r1
 8001344:      	movw	r1, #0x16d8
 8001348:      	movt	r1, #0x800
 800134c:      	b.w	0x8000e9e <core::fmt::write::h577537c504fd887c> @ imm = #-0x4b2

08001350 <__cpsid>:
 8001350:      	cpsid i
 8001352:      	bx	lr

08001354 <__cpsie>:
 8001354:      	cpsie i
 8001356:      	bx	lr

08001358 <__primask_r>:
 8001358:      	mrs	r0, primask
 800135c:      	bx	lr

0800135e <__aeabi_memcpy4>:
 800135e:      	b.w	0x8001366 <compiler_builtins::arm::__aeabi_memcpy4::hc958f2c7a5ce4bc7> @ imm = #0x4

08001362 <compiler_builtins::arm::__aeabi_memcpy::h6aa6b484524ceb0c>:
 8001362:      	b.w	0x800140c <compiler_builtins::mem::memcpy::h84ffe79a3206fc0f> @ imm = #0xa6

08001366 <compiler_builtins::arm::__aeabi_memcpy4::hc958f2c7a5ce4bc7>:
 8001366:      	cmp	r2, #0x4
 8001368:      	blo	0x800139c <compiler_builtins::arm::__aeabi_memcpy4::hc958f2c7a5ce4bc7+0x36> @ imm = #0x30
 800136a:      	push	{r4, r5, r7, lr}
 800136c:      	add	r7, sp, #0x8
 800136e:      	sub.w	lr, r2, #0x4
 8001372:      	movs	r3, #0x1
 8001374:      	add.w	r3, r3, lr, lsr #2
 8001378:      	ands	r4, r3, #0x3
 800137c:      	beq	0x80013a8 <compiler_builtins::arm::__aeabi_memcpy4::hc958f2c7a5ce4bc7+0x42> @ imm = #0x28
 800137e:      	mov	r12, r1
 8001380:      	mov	r3, r0
 8001382:      	ldr	r5, [r12], #4
 8001386:      	cmp	r4, #0x1
 8001388:      	str	r5, [r3], #4
 800138c:      	bne	0x80013ba <compiler_builtins::arm::__aeabi_memcpy4::hc958f2c7a5ce4bc7+0x54> @ imm = #0x2a
 800138e:      	mov	r0, r3
 8001390:      	mov	r1, r12
 8001392:      	mov	r2, lr
 8001394:      	cmp.w	lr, #0xc
 8001398:      	bhs	0x80013de <compiler_builtins::arm::__aeabi_memcpy4::hc958f2c7a5ce4bc7+0x78> @ imm = #0x42
 800139a:      	b	0x80013ae <compiler_builtins::arm::__aeabi_memcpy4::hc958f2c7a5ce4bc7+0x48> @ imm = #0x10
 800139c:      	mov	r12, r1
 800139e:      	mov	r3, r0
 80013a0:      	mov	r0, r3
 80013a2:      	mov	r1, r12
 80013a4:      	b.w	0x8001362 <compiler_builtins::arm::__aeabi_memcpy::h6aa6b484524ceb0c> @ imm = #-0x46
 80013a8:      	cmp.w	lr, #0xc
 80013ac:      	bhs	0x80013de <compiler_builtins::arm::__aeabi_memcpy4::hc958f2c7a5ce4bc7+0x78> @ imm = #0x2e
 80013ae:      	pop.w	{r4, r5, r7, lr}
 80013b2:      	mov	r0, r3
 80013b4:      	mov	r1, r12
 80013b6:      	b.w	0x8001362 <compiler_builtins::arm::__aeabi_memcpy::h6aa6b484524ceb0c> @ imm = #-0x58
 80013ba:      	ldr	r3, [r1, #0x4]
 80013bc:      	cmp	r4, #0x2
 80013be:      	str	r3, [r0, #0x4]
 80013c0:      	bne	0x80013ca <compiler_builtins::arm::__aeabi_memcpy4::hc958f2c7a5ce4bc7+0x64> @ imm = #0x6
 80013c2:      	subs	r2, #0x8
 80013c4:      	adds	r1, #0x8
 80013c6:      	adds	r0, #0x8
 80013c8:      	b	0x80013d4 <compiler_builtins::arm::__aeabi_memcpy4::hc958f2c7a5ce4bc7+0x6e> @ imm = #0x8
 80013ca:      	ldr	r3, [r1, #0x8]
 80013cc:      	subs	r2, #0xc
 80013ce:      	str	r3, [r0, #0x8]
 80013d0:      	adds	r1, #0xc
 80013d2:      	adds	r0, #0xc
 80013d4:      	mov	r3, r0
 80013d6:      	mov	r12, r1
 80013d8:      	cmp.w	lr, #0xc
 80013dc:      	blo	0x80013ae <compiler_builtins::arm::__aeabi_memcpy4::hc958f2c7a5ce4bc7+0x48> @ imm = #-0x32
 80013de:      	ldr	r3, [r1]
 80013e0:      	subs	r2, #0x10
 80013e2:      	str	r3, [r0]
 80013e4:      	cmp	r2, #0x3
 80013e6:      	ldr	r3, [r1, #0x4]
 80013e8:      	str	r3, [r0, #0x4]
 80013ea:      	ldr	r3, [r1, #0x8]
 80013ec:      	str	r3, [r0, #0x8]
 80013ee:      	ldr	r3, [r1, #0xc]
 80013f0:      	add.w	r1, r1, #0x10
 80013f4:      	str	r3, [r0, #0xc]
 80013f6:      	add.w	r0, r0, #0x10
 80013fa:      	bhi	0x80013de <compiler_builtins::arm::__aeabi_memcpy4::hc958f2c7a5ce4bc7+0x78> @ imm = #-0x20
 80013fc:      	mov	r12, r1
 80013fe:      	mov	r3, r0
 8001400:      	pop.w	{r4, r5, r7, lr}
 8001404:      	mov	r0, r3
 8001406:      	mov	r1, r12
 8001408:      	b.w	0x8001362 <compiler_builtins::arm::__aeabi_memcpy::h6aa6b484524ceb0c> @ imm = #-0xaa

0800140c <compiler_builtins::mem::memcpy::h84ffe79a3206fc0f>:
 800140c:      	push	{r4, r5, r6, r7, lr}
 800140e:      	add	r7, sp, #0xc
 8001410:      	push.w	{r8, r9, r10}
 8001414:      	cmp	r2, #0x10
 8001416:      	blo	0x80014e0 <compiler_builtins::mem::memcpy::h84ffe79a3206fc0f+0xd4> @ imm = #0xc6
 8001418:      	rsbs	r3, r0, #0
 800141a:      	ands	r4, r3, #0x3
 800141e:      	add.w	r12, r0, r4
 8001422:      	beq	0x8001452 <compiler_builtins::mem::memcpy::h84ffe79a3206fc0f+0x46> @ imm = #0x2c
 8001424:      	mov	r3, r0
 8001426:      	mov	r6, r1
 8001428:      	ldrb	r5, [r6]
 800142a:      	strb	r5, [r3], #1
 800142e:      	cmp	r3, r12
 8001430:      	bhs	0x8001452 <compiler_builtins::mem::memcpy::h84ffe79a3206fc0f+0x46> @ imm = #0x1e
 8001432:      	ldrb	r5, [r6, #0x1]
 8001434:      	strb	r5, [r3], #1
 8001438:      	cmp	r3, r12
 800143a:      	ittt	lo
 800143c:      	ldrblo	r5, [r6, #0x2]
 800143e:      	strblo	r5, [r3], #1
 8001442:      	cmplo	r3, r12
 8001444:      	bhs	0x8001452 <compiler_builtins::mem::memcpy::h84ffe79a3206fc0f+0x46> @ imm = #0xa
 8001446:      	ldrb	r5, [r6, #0x3]
 8001448:      	adds	r6, #0x4
 800144a:      	strb	r5, [r3], #1
 800144e:      	cmp	r3, r12
 8001450:      	blo	0x8001428 <compiler_builtins::mem::memcpy::h84ffe79a3206fc0f+0x1c> @ imm = #-0x2c
 8001452:      	sub.w	lr, r2, r4
 8001456:      	add.w	r9, r1, r4
 800145a:      	bic	r8, lr, #0x3
 800145e:      	add.w	r3, r12, r8
 8001462:      	lsls.w	r1, r9, #0x1e
 8001466:      	beq	0x80014e6 <compiler_builtins::mem::memcpy::h84ffe79a3206fc0f+0xda> @ imm = #0x7c
 8001468:      	cmp.w	r8, #0x1
 800146c:      	blt	0x8001518 <compiler_builtins::mem::memcpy::h84ffe79a3206fc0f+0x10c> @ imm = #0xa8
 800146e:      	movs	r1, #0x18
 8001470:      	bic	r2, r9, #0x3
 8001474:      	and.w	r10, r1, r9, lsl #3
 8001478:      	lsl.w	r1, r9, #0x3
 800147c:      	add.w	r5, r2, #0x8
 8001480:      	rsbs	r1, r1, #0
 8001482:      	ldr	r2, [r2]
 8001484:      	and	r6, r1, #0x18
 8001488:      	ldr	r1, [r5, #-4]
 800148c:      	lsr.w	r2, r2, r10
 8001490:      	lsl.w	r4, r1, r6
 8001494:      	orrs	r2, r4
 8001496:      	str	r2, [r12], #4
 800149a:      	cmp	r12, r3
 800149c:      	bhs	0x8001518 <compiler_builtins::mem::memcpy::h84ffe79a3206fc0f+0x10c> @ imm = #0x78
 800149e:      	ldr	r2, [r5]
 80014a0:      	lsr.w	r1, r1, r10
 80014a4:      	lsl.w	r4, r2, r6
 80014a8:      	orrs	r1, r4
 80014aa:      	str	r1, [r12], #4
 80014ae:      	cmp	r12, r3
 80014b0:      	itttt	lo
 80014b2:      	ldrlo	r1, [r5, #0x4]
 80014b4:      	lsrlo.w	r2, r2, r10
 80014b8:      	lsllo.w	r4, r1, r6
 80014bc:      	orrlo	r2, r4
 80014be:      	itt	lo
 80014c0:      	strlo	r2, [r12], #4
 80014c4:      	cmplo	r12, r3
 80014c6:      	bhs	0x8001518 <compiler_builtins::mem::memcpy::h84ffe79a3206fc0f+0x10c> @ imm = #0x4e
 80014c8:      	ldr	r2, [r5, #0x8]
 80014ca:      	lsr.w	r1, r1, r10
 80014ce:      	adds	r5, #0x10
 80014d0:      	lsl.w	r4, r2, r6
 80014d4:      	orrs	r1, r4
 80014d6:      	str	r1, [r12], #4
 80014da:      	cmp	r12, r3
 80014dc:      	blo	0x8001488 <compiler_builtins::mem::memcpy::h84ffe79a3206fc0f+0x7c> @ imm = #-0x58
 80014de:      	b	0x8001518 <compiler_builtins::mem::memcpy::h84ffe79a3206fc0f+0x10c> @ imm = #0x36
 80014e0:      	mov	r3, r0
 80014e2:      	cbnz	r2, 0x8001522 <compiler_builtins::mem::memcpy::h84ffe79a3206fc0f+0x116> @ imm = #0x3c
 80014e4:      	b	0x800154e <compiler_builtins::mem::memcpy::h84ffe79a3206fc0f+0x142> @ imm = #0x66
 80014e6:      	cmp.w	r8, #0x1
 80014ea:      	blt	0x8001518 <compiler_builtins::mem::memcpy::h84ffe79a3206fc0f+0x10c> @ imm = #0x2a
 80014ec:      	mov	r4, r9
 80014ee:      	ldr	r1, [r4]
 80014f0:      	str	r1, [r12], #4
 80014f4:      	cmp	r12, r3
 80014f6:      	bhs	0x8001518 <compiler_builtins::mem::memcpy::h84ffe79a3206fc0f+0x10c> @ imm = #0x1e
 80014f8:      	ldr	r1, [r4, #0x4]
 80014fa:      	str	r1, [r12], #4
 80014fe:      	cmp	r12, r3
 8001500:      	ittt	lo
 8001502:      	ldrlo	r1, [r4, #0x8]
 8001504:      	strlo	r1, [r12], #4
 8001508:      	cmplo	r12, r3
 800150a:      	bhs	0x8001518 <compiler_builtins::mem::memcpy::h84ffe79a3206fc0f+0x10c> @ imm = #0xa
 800150c:      	ldr	r1, [r4, #0xc]
 800150e:      	adds	r4, #0x10
 8001510:      	str	r1, [r12], #4
 8001514:      	cmp	r12, r3
 8001516:      	blo	0x80014ee <compiler_builtins::mem::memcpy::h84ffe79a3206fc0f+0xe2> @ imm = #-0x2c
 8001518:      	add.w	r1, r9, r8
 800151c:      	and	r2, lr, #0x3
 8001520:      	cbz	r2, 0x800154e <compiler_builtins::mem::memcpy::h84ffe79a3206fc0f+0x142> @ imm = #0x2a
 8001522:      	add	r2, r3
 8001524:      	ldrb	r6, [r1]
 8001526:      	strb	r6, [r3], #1
 800152a:      	cmp	r3, r2
 800152c:      	bhs	0x800154e <compiler_builtins::mem::memcpy::h84ffe79a3206fc0f+0x142> @ imm = #0x1e
 800152e:      	ldrb	r6, [r1, #0x1]
 8001530:      	strb	r6, [r3], #1
 8001534:      	cmp	r3, r2
 8001536:      	ittt	lo
 8001538:      	ldrblo	r6, [r1, #0x2]
 800153a:      	strblo	r6, [r3], #1
 800153e:      	cmplo	r3, r2
 8001540:      	bhs	0x800154e <compiler_builtins::mem::memcpy::h84ffe79a3206fc0f+0x142> @ imm = #0xa
 8001542:      	ldrb	r6, [r1, #0x3]
 8001544:      	adds	r1, #0x4
 8001546:      	strb	r6, [r3], #1
 800154a:      	cmp	r3, r2
 800154c:      	blo	0x8001524 <compiler_builtins::mem::memcpy::h84ffe79a3206fc0f+0x118> @ imm = #-0x2c
 800154e:      	pop.w	{r8, r9, r10}
 8001552:      	pop	{r4, r5, r6, r7, pc}

08001554 <HardFaultTrampoline>:
 8001554:      	mov	r0, lr
 8001556:      	movs	r1, #0x4
 8001558:      	tst	r0, r1
 800155a:      	bne	0x8001562 <HardFaultTrampoline+0xe> @ imm = #0x4
 800155c:      	mrs	r0, msp
 8001560:      	b	0x8001568 <HardFault_>  @ imm = #0x4
 8001562:      	mrs	r0, psp
 8001566:      	b	0x8001568 <HardFault_>  @ imm = #-0x2

08001568 <HardFault_>:
;     loop {
 8001568:      	b	0x8001568 <HardFault_>  @ imm = #-0x4
 800156a:      	bmi	0x8001516 <compiler_builtins::mem::memcpy::h84ffe79a3206fc0f+0x10a> @ imm = #-0x58
